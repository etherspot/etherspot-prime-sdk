/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface FallbackInterface extends utils.Interface {
  functions: {
    "entryPoint()": FunctionFragment;
    "installExecutor(address,bytes)": FunctionFragment;
    "installFallback(address,bytes)": FunctionFragment;
    "installValidator(address,bytes)": FunctionFragment;
    "isExecutorInstalled(address)": FunctionFragment;
    "isFallbackInstalled(address)": FunctionFragment;
    "isValidatorInstalled(address)": FunctionFragment;
    "uninstallExecutor(address,bytes)": FunctionFragment;
    "uninstallFallback(address,bytes)": FunctionFragment;
    "uninstallValidator(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "entryPoint"
      | "installExecutor"
      | "installFallback"
      | "installValidator"
      | "isExecutorInstalled"
      | "isFallbackInstalled"
      | "isValidatorInstalled"
      | "uninstallExecutor"
      | "uninstallFallback"
      | "uninstallValidator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "installExecutor",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "installFallback",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "installValidator",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExecutorInstalled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFallbackInstalled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorInstalled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallExecutor",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallFallback",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallValidator",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "installExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExecutorInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFallbackInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallValidator",
    data: BytesLike
  ): Result;

  events: {
    "DisableExecutor(address)": EventFragment;
    "DisableValidator(address)": EventFragment;
    "EnableExecutor(address)": EventFragment;
    "EnableValidator(address)": EventFragment;
    "FallbackHandlerChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisableExecutor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisableValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableExecutor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FallbackHandlerChanged"): EventFragment;
}

export interface DisableExecutorEventObject {
  module: string;
}
export type DisableExecutorEvent = TypedEvent<
  [string],
  DisableExecutorEventObject
>;

export type DisableExecutorEventFilter = TypedEventFilter<DisableExecutorEvent>;

export interface DisableValidatorEventObject {
  module: string;
}
export type DisableValidatorEvent = TypedEvent<
  [string],
  DisableValidatorEventObject
>;

export type DisableValidatorEventFilter =
  TypedEventFilter<DisableValidatorEvent>;

export interface EnableExecutorEventObject {
  module: string;
}
export type EnableExecutorEvent = TypedEvent<
  [string],
  EnableExecutorEventObject
>;

export type EnableExecutorEventFilter = TypedEventFilter<EnableExecutorEvent>;

export interface EnableValidatorEventObject {
  module: string;
}
export type EnableValidatorEvent = TypedEvent<
  [string],
  EnableValidatorEventObject
>;

export type EnableValidatorEventFilter = TypedEventFilter<EnableValidatorEvent>;

export interface FallbackHandlerChangedEventObject {
  handler: string;
}
export type FallbackHandlerChangedEvent = TypedEvent<
  [string],
  FallbackHandlerChangedEventObject
>;

export type FallbackHandlerChangedEventFilter =
  TypedEventFilter<FallbackHandlerChangedEvent>;

export interface Fallback extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FallbackInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    installExecutor(
      executor: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installFallback(
      fallbackHandler: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installValidator(
      validator: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isExecutorInstalled(
      executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFallbackInstalled(
      fallbackHandler: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { enabled: boolean }>;

    isValidatorInstalled(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uninstallExecutor(
      executor: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uninstallFallback(
      arg0: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uninstallValidator(
      validator: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  entryPoint(overrides?: CallOverrides): Promise<string>;

  installExecutor(
    executor: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installFallback(
    fallbackHandler: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installValidator(
    validator: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isExecutorInstalled(
    executor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFallbackInstalled(
    fallbackHandler: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidatorInstalled(
    validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uninstallExecutor(
    executor: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uninstallFallback(
    arg0: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uninstallValidator(
    validator: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    entryPoint(overrides?: CallOverrides): Promise<string>;

    installExecutor(
      executor: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    installFallback(
      fallbackHandler: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    installValidator(
      validator: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isExecutorInstalled(
      executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFallbackInstalled(
      fallbackHandler: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidatorInstalled(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uninstallExecutor(
      executor: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    uninstallFallback(
      arg0: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    uninstallValidator(
      validator: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DisableExecutor(address)"(module?: null): DisableExecutorEventFilter;
    DisableExecutor(module?: null): DisableExecutorEventFilter;

    "DisableValidator(address)"(module?: null): DisableValidatorEventFilter;
    DisableValidator(module?: null): DisableValidatorEventFilter;

    "EnableExecutor(address)"(module?: null): EnableExecutorEventFilter;
    EnableExecutor(module?: null): EnableExecutorEventFilter;

    "EnableValidator(address)"(module?: null): EnableValidatorEventFilter;
    EnableValidator(module?: null): EnableValidatorEventFilter;

    "FallbackHandlerChanged(address)"(
      handler?: null
    ): FallbackHandlerChangedEventFilter;
    FallbackHandlerChanged(handler?: null): FallbackHandlerChangedEventFilter;
  };

  estimateGas: {
    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    installExecutor(
      executor: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installFallback(
      fallbackHandler: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installValidator(
      validator: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isExecutorInstalled(
      executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFallbackInstalled(
      fallbackHandler: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidatorInstalled(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uninstallExecutor(
      executor: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uninstallFallback(
      arg0: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uninstallValidator(
      validator: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    installExecutor(
      executor: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installFallback(
      fallbackHandler: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installValidator(
      validator: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isExecutorInstalled(
      executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFallbackInstalled(
      fallbackHandler: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidatorInstalled(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uninstallExecutor(
      executor: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uninstallFallback(
      arg0: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uninstallValidator(
      validator: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
