/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IAccountConfig_HookInterface extends utils.Interface {
  functions: {
    "installHook(address,bytes)": FunctionFragment;
    "isHookInstalled(address)": FunctionFragment;
    "uninstallHook(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "installHook" | "isHookInstalled" | "uninstallHook"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "installHook",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isHookInstalled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallHook",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "installHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHookInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallHook",
    data: BytesLike
  ): Result;

  events: {
    "DisableHook(address)": EventFragment;
    "EnableHook(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisableHook"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableHook"): EventFragment;
}

export interface DisableHookEventObject {
  module: string;
}
export type DisableHookEvent = TypedEvent<[string], DisableHookEventObject>;

export type DisableHookEventFilter = TypedEventFilter<DisableHookEvent>;

export interface EnableHookEventObject {
  module: string;
}
export type EnableHookEvent = TypedEvent<[string], EnableHookEventObject>;

export type EnableHookEventFilter = TypedEventFilter<EnableHookEvent>;

export interface IAccountConfig_Hook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccountConfig_HookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    installHook(
      hook: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isHookInstalled(
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uninstallHook(
      hook: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  installHook(
    hook: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isHookInstalled(
    hook: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uninstallHook(
    hook: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    installHook(
      hook: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isHookInstalled(
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uninstallHook(
      hook: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DisableHook(address)"(module?: null): DisableHookEventFilter;
    DisableHook(module?: null): DisableHookEventFilter;

    "EnableHook(address)"(module?: null): EnableHookEventFilter;
    EnableHook(module?: null): EnableHookEventFilter;
  };

  estimateGas: {
    installHook(
      hook: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isHookInstalled(
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uninstallHook(
      hook: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    installHook(
      hook: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isHookInstalled(
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uninstallHook(
      hook: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
