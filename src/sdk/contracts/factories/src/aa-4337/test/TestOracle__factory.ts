/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestOracle,
  TestOracleInterface,
} from "../../../../src/aa-4337/test/TestOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ethOutput",
        type: "uint256",
      },
    ],
    name: "getTokenValueOfEth",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenInput",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ee806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d1eca9cf14610030575b600080fd5b61004a600480360381019061004591906100f0565b610060565b604051610057919061012c565b60405180910390f35b6000610076671de6df21cf0f923a60c01b6100b2565b61008a673ac66211b4f06d2060c01b6100b2565b61009e67f5762ff1a1db9bae60c01b6100b2565b6002826100ab9190610176565b9050919050565b50565b600080fd5b6000819050919050565b6100cd816100ba565b81146100d857600080fd5b50565b6000813590506100ea816100c4565b92915050565b600060208284031215610106576101056100b5565b5b6000610114848285016100db565b91505092915050565b610126816100ba565b82525050565b6000602082019050610141600083018461011d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610181826100ba565b915061018c836100ba565b925082820261019a816100ba565b915082820484148315176101b1576101b0610147565b5b509291505056fea264697066735822122021d72174a66ed2db30b236932b17dda763fb8c4699f9fd1d2d39e4ad9809a99964736f6c63430008110033";

type TestOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestOracle__factory extends ContractFactory {
  constructor(...args: TestOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestOracle> {
    return super.deploy(overrides || {}) as Promise<TestOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestOracle {
    return super.attach(address) as TestOracle;
  }
  override connect(signer: Signer): TestOracle__factory {
    return super.connect(signer) as TestOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestOracleInterface {
    return new utils.Interface(_abi) as TestOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestOracle {
    return new Contract(address, _abi, signerOrProvider) as TestOracle;
  }
}
