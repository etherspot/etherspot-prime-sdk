/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestExpirePaymaster,
  TestExpirePaymasterInterface,
} from "../../../../src/aa-4337/test/TestExpirePaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001a3c38038062001a3c833981810160405281019062000037919062000238565b80620000586200004c620000e860201b60201c565b620000f060201b60201c565b6200007467aabb336c9ce83de860c01b620001b460201b60201c565b62000090672d07becd259a4ef060c01b620001b460201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620000e167df1b572e3856863860c01b620001b760201b60201c565b506200026a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ec82620001bf565b9050919050565b60006200020082620001df565b9050919050565b6200021281620001f3565b81146200021e57600080fd5b50565b600081519050620002328162000207565b92915050565b600060208284031215620002515762000250620001ba565b5b6000620002618482850162000221565b91505092915050565b608051611785620002b7600039600081816102d1015281816103cc01528181610518015281816105a801528181610696015281816107620152818161083d0152610b6a01526117856000f3fe6080604052600436106100a75760003560e01c8063bb9fe6bf11610064578063bb9fe6bf14610187578063c23a5cea1461019e578063c399ec88146101c7578063d0e30db0146101f2578063f2fde38b146101fc578063f465c77e14610225576100a7565b80630396cb60146100ac578063205c2878146100c8578063715018a6146100f15780638da5cb5b14610108578063a9a2340914610133578063b0d691fe1461015c575b600080fd5b6100c660048036038101906100c19190610e85565b610263565b005b3480156100d457600080fd5b506100ef60048036038101906100ea9190610f46565b61035e565b005b3480156100fd57600080fd5b5061010661045b565b005b34801561011457600080fd5b5061011d61046f565b60405161012a9190610fa7565b60405180910390f35b34801561013f57600080fd5b5061015a6004803603810190610155919061104c565b610498565b005b34801561016857600080fd5b50610171610516565b60405161017e919061111f565b60405180910390f35b34801561019357600080fd5b5061019c61053a565b005b3480156101aa57600080fd5b506101c560048036038101906101c0919061113a565b610628565b005b3480156101d357600080fd5b506101dc610722565b6040516101e99190611176565b60405180910390f35b6101fa6107ff565b005b34801561020857600080fd5b50610223600480360381019061021e91906111bd565b6108c9565b005b34801561023157600080fd5b5061024c60048036038101906102479190611245565b61094c565b60405161025a929190611344565b60405180910390f35b61027767b8237d27482ab06b60c01b6109d3565b61027f6109d6565b61029367e2f107173549500460c01b6109d3565b6102a76701033209d47e5b2460c01b6109d3565b6102bb67dcd4652c61f0b32d60c01b6109d3565b6102cf67eae392c3eb511cc760c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b81526004016103299190611383565b6000604051808303818588803b15801561034257600080fd5b505af1158015610356573d6000803e3d6000fd5b505050505050565b610372672907e6d97c3d1da360c01b6109d3565b61037a6109d6565b61038e678ac019c63563710260c01b6109d3565b6103a267da1f1c840719888260c01b6109d3565b6103b667bc135ce98e9f326f60c01b6109d3565b6103ca67532d977f60999f3e60c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b81526004016104259291906113ad565b600060405180830381600087803b15801561043f57600080fd5b505af1158015610453573d6000803e3d6000fd5b505050505050565b6104636109d6565b61046d6000610a54565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104ac672cf57c41b8b89fcb60c01b6109d3565b6104c06799497fbe705cd9f760c01b6109d3565b6104d4679b4512fe9e58bae960c01b6109d3565b6104dc610b18565b6104f06793ce2f3709fe770560c01b6109d3565b6105046790067c65a6f5d3a860c01b6109d3565b61051084848484610c0c565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61054e67ec8a9719e7b677d060c01b6109d3565b6105566109d6565b61056a67672cc496b6067cea60c01b6109d3565b61057e674fdbd001b77629ae60c01b6109d3565b610592677362eae3491c0ae160c01b6109d3565b6105a66797f9e99fb1d4b33860c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b50505050565b61063c67c9ef1b986fb51fe860c01b6109d3565b6106446109d6565b61065867de53cad8928d67f560c01b6109d3565b61066c677af1d989d252676f60c01b6109d3565b610680676fd423196847dbb160c01b6109d3565b61069467097023434434ee0460c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b81526004016106ed91906113d6565b600060405180830381600087803b15801561070757600080fd5b505af115801561071b573d6000803e3d6000fd5b5050505050565b600061073867f6be01970597753160c01b6109d3565b61074c673f87ae81816372b460c01b6109d3565b61076067bd328ab4ce68c2fb60c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107b99190610fa7565b602060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190611406565b905090565b610813673943ebd1bec8d2d660c01b6109d3565b6108276702fc4196924a47ac60c01b6109d3565b61083b675d10604969f00bcf60c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b81526004016108959190610fa7565b6000604051808303818588803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b5050505050565b6108d16109d6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610940576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610937906114b6565b60405180910390fd5b61094981610a54565b50565b606060006109646791cf27427781cd8860c01b6109d3565b610978676434b0ee41880ab260c01b6109d3565b61098c67f2c91afe86e9062d60c01b6109d3565b610994610b18565b6109a86723ccedb6dfbcc30860c01b6109d3565b6109bc67287492035946b96c60c01b6109d3565b6109c7858585610c97565b91509150935093915050565b50565b6109de610d73565b73ffffffffffffffffffffffffffffffffffffffff166109fc61046f565b73ffffffffffffffffffffffffffffffffffffffff1614610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4990611522565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610b2c6793fe0ed3ca04f82b60c01b6109d3565b610b40678abd782107e62dce60c01b6109d3565b610b5467b9c2ce2852bf0cf360c01b6109d3565b610b6867f8314810c2ffd6e460c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed9061158e565b60405180910390fd5b610c0a677eb1fed1a5060b5e60c01b6109d3565b565b610c2067fadd006a881f054660c01b6109d3565b610c3467d9873e623a945ead60c01b6109d3565b610c4867b1300829c5ca164560c01b6109d3565b610c5c67b80ccfd3afb0094c60c01b6109d3565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8e906115fa565b60405180910390fd5b60606000610caf67eb8470f1ec4622b160c01b610d7b565b610cc367415a1cea66cc082c60c01b610d7b565b610cd76780c0c917d680294a60c01b610d7b565b610ceb67c207178efe70c0d060c01b610d7b565b60008086806101200190610cff9190611629565b6014908092610d1093929190611696565b810190610d1d919061170f565b91509150610d35676eb41316c87a8eda60c01b610d7b565b610d4160008284610d7e565b9250610d57679b2f16d97cd7f94c60c01b610d7b565b6040518060200160405280600081525093505050935093915050565b600033905090565b50565b6000610d9467f46661bb4e8bad1e60c01b610e2a565b610da867ad115cf58922913f60c01b610e2a565b610dbc67e939de70e4ee463c60c01b610e2a565b60d08265ffffffffffff16901b60a08465ffffffffffff16901b858015610df35750610df2675d24490627414a1d60c01b610e2d565b5b80610e0e5750610e0d6748f460bd74afa2fc60c01b610e38565b5b610e19576000610e1c565b60015b60ff16171790509392505050565b50565b600060019050919050565b6000919050565b600080fd5b600080fd5b600063ffffffff82169050919050565b610e6281610e49565b8114610e6d57600080fd5b50565b600081359050610e7f81610e59565b92915050565b600060208284031215610e9b57610e9a610e3f565b5b6000610ea984828501610e70565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610edd82610eb2565b9050919050565b610eed81610ed2565b8114610ef857600080fd5b50565b600081359050610f0a81610ee4565b92915050565b6000819050919050565b610f2381610f10565b8114610f2e57600080fd5b50565b600081359050610f4081610f1a565b92915050565b60008060408385031215610f5d57610f5c610e3f565b5b6000610f6b85828601610efb565b9250506020610f7c85828601610f31565b9150509250929050565b6000610f9182610eb2565b9050919050565b610fa181610f86565b82525050565b6000602082019050610fbc6000830184610f98565b92915050565b60038110610fcf57600080fd5b50565b600081359050610fe181610fc2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261100c5761100b610fe7565b5b8235905067ffffffffffffffff81111561102957611028610fec565b5b60208301915083600182028301111561104557611044610ff1565b5b9250929050565b6000806000806060858703121561106657611065610e3f565b5b600061107487828801610fd2565b945050602085013567ffffffffffffffff81111561109557611094610e44565b5b6110a187828801610ff6565b935093505060406110b487828801610f31565b91505092959194509250565b6000819050919050565b60006110e56110e06110db84610eb2565b6110c0565b610eb2565b9050919050565b60006110f7826110ca565b9050919050565b6000611109826110ec565b9050919050565b611119816110fe565b82525050565b60006020820190506111346000830184611110565b92915050565b6000602082840312156111505761114f610e3f565b5b600061115e84828501610efb565b91505092915050565b61117081610f10565b82525050565b600060208201905061118b6000830184611167565b92915050565b61119a81610f86565b81146111a557600080fd5b50565b6000813590506111b781611191565b92915050565b6000602082840312156111d3576111d2610e3f565b5b60006111e1848285016111a8565b91505092915050565b600080fd5b60006101608284031215611206576112056111ea565b5b81905092915050565b6000819050919050565b6112228161120f565b811461122d57600080fd5b50565b60008135905061123f81611219565b92915050565b60008060006060848603121561125e5761125d610e3f565b5b600084013567ffffffffffffffff81111561127c5761127b610e44565b5b611288868287016111ef565b935050602061129986828701611230565b92505060406112aa86828701610f31565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156112ee5780820151818401526020810190506112d3565b60008484015250505050565b6000601f19601f8301169050919050565b6000611316826112b4565b61132081856112bf565b93506113308185602086016112d0565b611339816112fa565b840191505092915050565b6000604082019050818103600083015261135e818561130b565b905061136d6020830184611167565b9392505050565b61137d81610e49565b82525050565b60006020820190506113986000830184611374565b92915050565b6113a781610ed2565b82525050565b60006040820190506113c2600083018561139e565b6113cf6020830184611167565b9392505050565b60006020820190506113eb600083018461139e565b92915050565b60008151905061140081610f1a565b92915050565b60006020828403121561141c5761141b610e3f565b5b600061142a848285016113f1565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006114a0602683611433565b91506114ab82611444565b604082019050919050565b600060208201905081810360008301526114cf81611493565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061150c602083611433565b9150611517826114d6565b602082019050919050565b6000602082019050818103600083015261153b816114ff565b9050919050565b7f53656e646572206e6f7420456e747279506f696e740000000000000000000000600082015250565b6000611578601583611433565b915061158382611542565b602082019050919050565b600060208201905081810360008301526115a78161156b565b9050919050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b60006115e4600d83611433565b91506115ef826115ae565b602082019050919050565b60006020820190508181036000830152611613816115d7565b9050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126116465761164561161a565b5b80840192508235915067ffffffffffffffff8211156116685761166761161f565b5b60208301925060018202360383131561168457611683611624565b5b509250929050565b600080fd5b600080fd5b600080858511156116aa576116a961168c565b5b838611156116bb576116ba611691565b5b6001850283019150848603905094509492505050565b600065ffffffffffff82169050919050565b6116ec816116d1565b81146116f757600080fd5b50565b600081359050611709816116e3565b92915050565b6000806040838503121561172657611725610e3f565b5b6000611734858286016116fa565b9250506020611745858286016116fa565b915050925092905056fea26469706673582212200e14cd1cbad54c57a43c9a344ec1ca5415b1b8e39219e32351a28ba117307a1f64736f6c63430008110033";

type TestExpirePaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestExpirePaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestExpirePaymaster__factory extends ContractFactory {
  constructor(...args: TestExpirePaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestExpirePaymaster> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestExpirePaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): TestExpirePaymaster {
    return super.attach(address) as TestExpirePaymaster;
  }
  override connect(signer: Signer): TestExpirePaymaster__factory {
    return super.connect(signer) as TestExpirePaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestExpirePaymasterInterface {
    return new utils.Interface(_abi) as TestExpirePaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestExpirePaymaster {
    return new Contract(address, _abi, signerOrProvider) as TestExpirePaymaster;
  }
}
