/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MaliciousAccount,
  MaliciousAccountInterface,
} from "../../../../src/aa-4337/test/MaliciousAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260405161074a38038061074a83398181016040528101906100259190610117565b61003f67b1c42666877eec7660c01b61009f60201b60201c565b61005967d38130321fa1640f60c01b61009f60201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610144565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d2826100a7565b9050919050565b60006100e4826100c7565b9050919050565b6100f4816100d9565b81146100ff57600080fd5b50565b600081519050610111816100eb565b92915050565b60006020828403121561012d5761012c6100a2565b5b600061013b84828501610102565b91505092915050565b6105f7806101536000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633a871cdd14610030575b600080fd5b61004a60048036038101906100459190610358565b610060565b60405161005791906103d6565b60405180910390f35b600061007667766b89c4bda46e0660c01b6102ba565b61008a67165af625e9ab9f8360c01b6102ba565b61009e67e87db5b3282b05e360c01b6102ba565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf983306040518363ffffffff1660e01b81526004016100f89190610432565b6000604051808303818588803b15801561011157600080fd5b505af1158015610125573d6000803e3d6000fd5b505050505061013e67766735cc849dc02a60c01b6102ba565b6101526774b141f33daca82060c01b6102ba565b60008460c001358560a00135866080013561016d919061047c565b610177919061047c565b905061018d677a562f86acfa254d60c01b6102ba565b6101a167a83c158591cbc12860c01b6102ba565b600081846101af91906104df565b90506101c5678d9784b41f5ac6ad60c01b6102ba565b6101d96743b2418eed2d64c760c01b6102ba565b6000866101000135826101ec9190610510565b905061020267490bba215357938060c01b6102ba565b61021667424d06d3cbb9a4f260c01b6102ba565b61022a6762b622659b9e30c460c01b6102ba565b86602001358114610270576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610267906105a1565b60405180910390fd5b610284673c6bbc86a340b29460c01b6102ba565b6102986772ae809e3c15500a60c01b6102ba565b6102ac67aa82c210619738a660c01b6102ba565b600093505050509392505050565b50565b600080fd5b600080fd5b600080fd5b600061016082840312156102e3576102e26102c7565b5b81905092915050565b6000819050919050565b6102ff816102ec565b811461030a57600080fd5b50565b60008135905061031c816102f6565b92915050565b6000819050919050565b61033581610322565b811461034057600080fd5b50565b6000813590506103528161032c565b92915050565b600080600060608486031215610371576103706102bd565b5b600084013567ffffffffffffffff81111561038f5761038e6102c2565b5b61039b868287016102cc565b93505060206103ac8682870161030d565b92505060406103bd86828701610343565b9150509250925092565b6103d081610322565b82525050565b60006020820190506103eb60008301846103c7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061041c826103f1565b9050919050565b61042c81610411565b82525050565b60006020820190506104476000830184610423565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061048782610322565b915061049283610322565b92508282019050808211156104aa576104a961044d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006104ea82610322565b91506104f583610322565b925082610505576105046104b0565b5b828204905092915050565b600061051b82610322565b915061052683610322565b925082820390508181111561053e5761053d61044d565b5b92915050565b600082825260208201905092915050565b7f5265766572742061667465722066697273742076616c69646174696f6e000000600082015250565b600061058b601d83610544565b915061059682610555565b602082019050919050565b600060208201905081810360008301526105ba8161057e565b905091905056fea264697066735822122016f357c1ad0e6bfbd88d00fb986696c71c0ebdaeec09b236068c0fb89ab67ce664736f6c63430008110033";

type MaliciousAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MaliciousAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MaliciousAccount__factory extends ContractFactory {
  constructor(...args: MaliciousAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<MaliciousAccount> {
    return super.deploy(_ep, overrides || {}) as Promise<MaliciousAccount>;
  }
  override getDeployTransaction(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override attach(address: string): MaliciousAccount {
    return super.attach(address) as MaliciousAccount;
  }
  override connect(signer: Signer): MaliciousAccount__factory {
    return super.connect(signer) as MaliciousAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MaliciousAccountInterface {
    return new utils.Interface(_abi) as MaliciousAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MaliciousAccount {
    return new Contract(address, _abi, signerOrProvider) as MaliciousAccount;
  }
}
