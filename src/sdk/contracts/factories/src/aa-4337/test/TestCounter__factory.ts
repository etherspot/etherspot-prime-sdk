/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestCounter,
  TestCounterInterface,
} from "../../../../src/aa-4337/test/TestCounter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "CalledFrom",
    type: "event",
  },
  {
    inputs: [],
    name: "count",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countFail",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "counters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repeat",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "gasWaster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "justemit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "offset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "xxx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610742806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a5e9585f1161005b578063a5e9585f146100b2578063be65ab8c146100e2578063caece69314610112578063d55565441461011c5761007d565b806306661abd14610082578063278ddd3c1461008c578063a1b4689014610096575b600080fd5b61008a61013a565b005b6100946101f1565b005b6100b060048036038101906100ab9190610478565b610266565b005b6100cc60048036038101906100c791906104d8565b610323565b6040516100d99190610514565b60405180910390f35b6100fc60048036038101906100f7919061058d565b61033b565b6040516101099190610514565b60405180910390f35b61011a610353565b005b6101246103ca565b6040516101319190610514565b60405180910390f35b61014e67c36fedd94ca0a2de60c01b6103d0565b610162671f14039bc276c36c60c01b6103d0565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546101ad91906105e9565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b610205674f2ad6ba500318cb60c01b6103d0565b610219678c7c6e2b0e91a39f60c01b6103d0565b61022d6742fc7442c2550cfd60c01b6103d0565b7ffb3b4d6258432a9a3d78dd9bffbcb6cfb1bd94f58da35fd530d08da7d1d058323360405161025c919061062c565b60405180910390a1565b61027a67254d2649e410128860c01b6103d0565b61028e67ea8ced0b4f84014e60c01b6103d0565b6102a2675f53018e95f3a8b360c01b6103d0565b6000600190505b83811161031d576102c46789306646c5ccabae60c01b6103d0565b600260008154809291906102d790610647565b91905055506102f0671239800a0abd863a60c01b6103d0565b8060016000600254815260200190815260200160002081905550808061031590610647565b9150506102a9565b50505050565b60016020528060005260406000206000915090505481565b60006020528060005260406000206000915090505481565b610367674c33878c067f30ef60c01b6103d0565b61037b67ce5ac656eb2fa4c560c01b6103d0565b61038f67bca8f9997a55befd60c01b6103d0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c1906106ec565b60405180910390fd5b60025481565b50565b600080fd5b600080fd5b6000819050919050565b6103f0816103dd565b81146103fb57600080fd5b50565b60008135905061040d816103e7565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261043857610437610413565b5b8235905067ffffffffffffffff81111561045557610454610418565b5b6020830191508360018202830111156104715761047061041d565b5b9250929050565b600080600060408486031215610491576104906103d3565b5b600061049f868287016103fe565b935050602084013567ffffffffffffffff8111156104c0576104bf6103d8565b5b6104cc86828701610422565b92509250509250925092565b6000602082840312156104ee576104ed6103d3565b5b60006104fc848285016103fe565b91505092915050565b61050e816103dd565b82525050565b60006020820190506105296000830184610505565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061055a8261052f565b9050919050565b61056a8161054f565b811461057557600080fd5b50565b60008135905061058781610561565b92915050565b6000602082840312156105a3576105a26103d3565b5b60006105b184828501610578565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105f4826103dd565b91506105ff836103dd565b9250828201905080821115610617576106166105ba565b5b92915050565b6106268161054f565b82525050565b6000602082019050610641600083018461061d565b92915050565b6000610652826103dd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610684576106836105ba565b5b600182019050919050565b600082825260208201905092915050565b7f636f756e74206661696c65640000000000000000000000000000000000000000600082015250565b60006106d6600c8361068f565b91506106e1826106a0565b602082019050919050565b60006020820190508181036000830152610705816106c9565b905091905056fea2646970667358221220dcb608c002f238f81a6c5664764429f2cc2998f2c7d1d79a246963eade9076fe64736f6c63430008110033";

type TestCounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCounter__factory extends ContractFactory {
  constructor(...args: TestCounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestCounter> {
    return super.deploy(overrides || {}) as Promise<TestCounter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestCounter {
    return super.attach(address) as TestCounter;
  }
  override connect(signer: Signer): TestCounter__factory {
    return super.connect(signer) as TestCounter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCounterInterface {
    return new utils.Interface(_abi) as TestCounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCounter {
    return new Contract(address, _abi, signerOrProvider) as TestCounter;
  }
}
