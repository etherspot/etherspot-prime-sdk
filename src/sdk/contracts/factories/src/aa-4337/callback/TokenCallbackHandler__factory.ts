/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TokenCallbackHandler,
  TokenCallbackHandlerInterface,
} from "../../../../src/aa-4337/callback/TokenCallbackHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "tokensReceived",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061097f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c806223de291461005b57806301ffc9a714610077578063150b7a02146100a7578063bc197c81146100d7578063f23a6e6114610107575b600080fd5b61007560048036038101906100709190610541565b610137565b005b610091600480360381019061008c9190610668565b610155565b60405161009e91906106b0565b60405180910390f35b6100c160048036038101906100bc91906106cb565b61033a565b6040516100ce9190610762565b60405180910390f35b6100f160048036038101906100ec91906107d3565b61038a565b6040516100fe9190610762565b60405180910390f35b610121600480360381019061011c91906108af565b6103de565b60405161012e9190610762565b60405180910390f35b61014b671278753381487ed660c01b610430565b5050505050505050565b600061016b67f20d647ea02d480060c01b610430565b61017f67ffb589296d687db060c01b610430565b6101936727ecf9b318901df560c01b610430565b7f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015610210575061020f675d4be9b73183ad3f60c01b610433565b5b806102b057507f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156102935750610292674cb5733a4ebd736b60c01b610433565b5b80156102af57506102ae67927753031b1e765d60c01b610433565b5b5b8061033357507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015610332575061033166bc16169e90631c60c01b610433565b5b5b9050919050565b600061034f6642558288c0c26a60c01b610430565b610363670cd59c881166cff460c01b610430565b61037767d8d160ce8c3ef4cc60c01b610430565b63150b7a0260e01b905095945050505050565b60006103a067f6036d4dbbf1553b60c01b610430565b6103b467e574cfd0134a53a360c01b610430565b6103c867481cad8a93626dbc60c01b610430565b63bc197c8160e01b905098975050505050505050565b60006103f467d55e6083e458695760c01b610430565b61040867229756682a8526f660c01b610430565b61041c672d0f5a7f66d6c2a060c01b610430565b63f23a6e6160e01b90509695505050505050565b50565b600060019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061047382610448565b9050919050565b61048381610468565b811461048e57600080fd5b50565b6000813590506104a08161047a565b92915050565b6000819050919050565b6104b9816104a6565b81146104c457600080fd5b50565b6000813590506104d6816104b0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610501576105006104dc565b5b8235905067ffffffffffffffff81111561051e5761051d6104e1565b5b60208301915083600182028301111561053a576105396104e6565b5b9250929050565b60008060008060008060008060c0898b0312156105615761056061043e565b5b600061056f8b828c01610491565b98505060206105808b828c01610491565b97505060406105918b828c01610491565b96505060606105a28b828c016104c7565b955050608089013567ffffffffffffffff8111156105c3576105c2610443565b5b6105cf8b828c016104eb565b945094505060a089013567ffffffffffffffff8111156105f2576105f1610443565b5b6105fe8b828c016104eb565b92509250509295985092959890939650565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61064581610610565b811461065057600080fd5b50565b6000813590506106628161063c565b92915050565b60006020828403121561067e5761067d61043e565b5b600061068c84828501610653565b91505092915050565b60008115159050919050565b6106aa81610695565b82525050565b60006020820190506106c560008301846106a1565b92915050565b6000806000806000608086880312156106e7576106e661043e565b5b60006106f588828901610491565b955050602061070688828901610491565b9450506040610717888289016104c7565b935050606086013567ffffffffffffffff81111561073857610737610443565b5b610744888289016104eb565b92509250509295509295909350565b61075c81610610565b82525050565b60006020820190506107776000830184610753565b92915050565b60008083601f840112610793576107926104dc565b5b8235905067ffffffffffffffff8111156107b0576107af6104e1565b5b6020830191508360208202830111156107cc576107cb6104e6565b5b9250929050565b60008060008060008060008060a0898b0312156107f3576107f261043e565b5b60006108018b828c01610491565b98505060206108128b828c01610491565b975050604089013567ffffffffffffffff81111561083357610832610443565b5b61083f8b828c0161077d565b9650965050606089013567ffffffffffffffff81111561086257610861610443565b5b61086e8b828c0161077d565b9450945050608089013567ffffffffffffffff81111561089157610890610443565b5b61089d8b828c016104eb565b92509250509295985092959890939650565b60008060008060008060a087890312156108cc576108cb61043e565b5b60006108da89828a01610491565b96505060206108eb89828a01610491565b95505060406108fc89828a016104c7565b945050606061090d89828a016104c7565b935050608087013567ffffffffffffffff81111561092e5761092d610443565b5b61093a89828a016104eb565b9250925050929550929550929556fea26469706673582212206c9db258b4adc31c2c2bc35b4082cedd9e5a544423a7d2c410132393335c672f64736f6c63430008110033";

type TokenCallbackHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenCallbackHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenCallbackHandler__factory extends ContractFactory {
  constructor(...args: TokenCallbackHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenCallbackHandler> {
    return super.deploy(overrides || {}) as Promise<TokenCallbackHandler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenCallbackHandler {
    return super.attach(address) as TokenCallbackHandler;
  }
  override connect(signer: Signer): TokenCallbackHandler__factory {
    return super.connect(signer) as TokenCallbackHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenCallbackHandlerInterface {
    return new utils.Interface(_abi) as TokenCallbackHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenCallbackHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TokenCallbackHandler;
  }
}
