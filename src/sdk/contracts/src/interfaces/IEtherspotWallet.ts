/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface IEtherspotWalletInterface extends utils.Interface {
  functions: {
    'addDeposit()': FunctionFragment;
    'entryPoint()': FunctionFragment;
    'execute(address,uint256,bytes)': FunctionFragment;
    'executeBatch(address[],bytes[])': FunctionFragment;
    'getDeposit()': FunctionFragment;
    'isOwner(address)': FunctionFragment;
    'nonce()': FunctionFragment;
    'updateEntryPoint(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addDeposit'
      | 'entryPoint'
      | 'execute'
      | 'executeBatch'
      | 'getDeposit'
      | 'isOwner'
      | 'nonce'
      | 'updateEntryPoint'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addDeposit',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'entryPoint',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'execute',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'executeBatch',
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'getDeposit',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'isOwner',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'nonce', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateEntryPoint',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: 'addDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'entryPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'executeBatch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonce', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateEntryPoint',
    data: BytesLike
  ): Result;

  events: {
    'EntryPointChanged(address,address)': EventFragment;
    'EtherspotWalletInitialized(address,address)': EventFragment;
    'EtherspotWalletReceived(address,uint256)': EventFragment;
    'OwnerAdded(address,uint256)': EventFragment;
    'OwnerRemoved(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'EntryPointChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EtherspotWalletInitialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EtherspotWalletReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerRemoved'): EventFragment;
}

export interface EntryPointChangedEventObject {
  oldEntryPoint: string;
  newEntryPoint: string;
}
export type EntryPointChangedEvent = TypedEvent<
  [string, string],
  EntryPointChangedEventObject
>;

export type EntryPointChangedEventFilter =
  TypedEventFilter<EntryPointChangedEvent>;

export interface EtherspotWalletInitializedEventObject {
  entryPoint: string;
  owner: string;
}
export type EtherspotWalletInitializedEvent = TypedEvent<
  [string, string],
  EtherspotWalletInitializedEventObject
>;

export type EtherspotWalletInitializedEventFilter =
  TypedEventFilter<EtherspotWalletInitializedEvent>;

export interface EtherspotWalletReceivedEventObject {
  from: string;
  amount: BigNumber;
}
export type EtherspotWalletReceivedEvent = TypedEvent<
  [string, BigNumber],
  EtherspotWalletReceivedEventObject
>;

export type EtherspotWalletReceivedEventFilter =
  TypedEventFilter<EtherspotWalletReceivedEvent>;

export interface OwnerAddedEventObject {
  newOwner: string;
  blockFrom: BigNumber;
}
export type OwnerAddedEvent = TypedEvent<
  [string, BigNumber],
  OwnerAddedEventObject
>;

export type OwnerAddedEventFilter = TypedEventFilter<OwnerAddedEvent>;

export interface OwnerRemovedEventObject {
  removedOwner: string;
  blockFrom: BigNumber;
}
export type OwnerRemovedEvent = TypedEvent<
  [string, BigNumber],
  OwnerRemovedEventObject
>;

export type OwnerRemovedEventFilter = TypedEventFilter<OwnerRemovedEvent>;

export interface IEtherspotWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEtherspotWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    execute(
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeBatch(
      dest: PromiseOrValue<string>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateEntryPoint(
      _newEntryPoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addDeposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entryPoint(overrides?: CallOverrides): Promise<string>;

  execute(
    dest: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    func: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeBatch(
    dest: PromiseOrValue<string>[],
    func: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  isOwner(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  updateEntryPoint(
    _newEntryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDeposit(overrides?: CallOverrides): Promise<void>;

    entryPoint(overrides?: CallOverrides): Promise<string>;

    execute(
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeBatch(
      dest: PromiseOrValue<string>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    updateEntryPoint(
      _newEntryPoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'EntryPointChanged(address,address)'(
      oldEntryPoint?: null,
      newEntryPoint?: null
    ): EntryPointChangedEventFilter;
    EntryPointChanged(
      oldEntryPoint?: null,
      newEntryPoint?: null
    ): EntryPointChangedEventFilter;

    'EtherspotWalletInitialized(address,address)'(
      entryPoint?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): EtherspotWalletInitializedEventFilter;
    EtherspotWalletInitialized(
      entryPoint?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): EtherspotWalletInitializedEventFilter;

    'EtherspotWalletReceived(address,uint256)'(
      from?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): EtherspotWalletReceivedEventFilter;
    EtherspotWalletReceived(
      from?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): EtherspotWalletReceivedEventFilter;

    'OwnerAdded(address,uint256)'(
      newOwner?: null,
      blockFrom?: null
    ): OwnerAddedEventFilter;
    OwnerAdded(newOwner?: null, blockFrom?: null): OwnerAddedEventFilter;

    'OwnerRemoved(address,uint256)'(
      removedOwner?: null,
      blockFrom?: null
    ): OwnerRemovedEventFilter;
    OwnerRemoved(
      removedOwner?: null,
      blockFrom?: null
    ): OwnerRemovedEventFilter;
  };

  estimateGas: {
    addDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeBatch(
      dest: PromiseOrValue<string>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    updateEntryPoint(
      _newEntryPoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeBatch(
      dest: PromiseOrValue<string>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateEntryPoint(
      _newEntryPoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
