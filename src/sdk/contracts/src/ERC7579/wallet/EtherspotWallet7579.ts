/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type PackedUserOperationStruct = {
  sender: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  initCode: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
  accountGasLimits: PromiseOrValue<BytesLike>;
  preVerificationGas: PromiseOrValue<BigNumberish>;
  gasFees: PromiseOrValue<BytesLike>;
  paymasterAndData: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type PackedUserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  string,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  accountGasLimits: string;
  preVerificationGas: BigNumber;
  gasFees: string;
  paymasterAndData: string;
  signature: string;
};

export declare namespace ModuleManager {
  export type FallbackHandlerStruct = {
    handler: PromiseOrValue<string>;
    calltype: PromiseOrValue<BytesLike>;
    allowedCallers: PromiseOrValue<string>[];
  };

  export type FallbackHandlerStructOutput = [string, string, string[]] & {
    handler: string;
    calltype: string;
    allowedCallers: string[];
  };
}

export interface ModularEtherspotWalletInterface extends utils.Interface {
  functions: {
    "accountId()": FunctionFragment;
    "addGuardian(address)": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "changeProposalTimelock(uint256)": FunctionFragment;
    "discardCurrentProposal()": FunctionFragment;
    "entryPoint()": FunctionFragment;
    "execute(bytes32,bytes)": FunctionFragment;
    "executeFromExecutor(bytes32,bytes)": FunctionFragment;
    "executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))": FunctionFragment;
    "getActiveFallbackHandler(bytes4)": FunctionFragment;
    "getActiveHook()": FunctionFragment;
    "getExecutorsPaginated(address,uint256)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getValidatorPaginated(address,uint256)": FunctionFragment;
    "guardianCosign()": FunctionFragment;
    "guardianCount()": FunctionFragment;
    "guardianPropose(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initializeAccount(bytes)": FunctionFragment;
    "installModule(uint256,address,bytes)": FunctionFragment;
    "isGuardian(address)": FunctionFragment;
    "isModuleInstalled(uint256,address,bytes)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "ownerCount()": FunctionFragment;
    "proposalId()": FunctionFragment;
    "proposalTimelock()": FunctionFragment;
    "removeGuardian(address)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "supportsExecutionMode(bytes32)": FunctionFragment;
    "supportsModule(uint256)": FunctionFragment;
    "uninstallModule(uint256,address,bytes)": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountId"
      | "addGuardian"
      | "addOwner"
      | "changeProposalTimelock"
      | "discardCurrentProposal"
      | "entryPoint"
      | "execute"
      | "executeFromExecutor"
      | "executeUserOp"
      | "getActiveFallbackHandler"
      | "getActiveHook"
      | "getExecutorsPaginated"
      | "getProposal"
      | "getValidatorPaginated"
      | "guardianCosign"
      | "guardianCount"
      | "guardianPropose"
      | "implementation"
      | "initializeAccount"
      | "installModule"
      | "isGuardian"
      | "isModuleInstalled"
      | "isOwner"
      | "isValidSignature"
      | "ownerCount"
      | "proposalId"
      | "proposalTimelock"
      | "removeGuardian"
      | "removeOwner"
      | "supportsExecutionMode"
      | "supportsModule"
      | "uninstallModule"
      | "validateUserOp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "accountId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProposalTimelock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "discardCurrentProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFromExecutor",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUserOp",
    values: [PackedUserOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveFallbackHandler",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorsPaginated",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorPaginated",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "guardianCosign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guardianCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guardianPropose",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeAccount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "installModule",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleInstalled",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsExecutionMode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsModule",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uninstallModule",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [
      PackedUserOperationStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "accountId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeProposalTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discardCurrentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeFromExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardianCosign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardianCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardianPropose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModuleInstalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposalId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsExecutionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uninstallModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;

  events: {
    "GuardianAdded(address,address)": EventFragment;
    "GuardianRemoved(address,address)": EventFragment;
    "ModuleInstalled(uint256,address)": EventFragment;
    "ModuleUninstalled(uint256,address)": EventFragment;
    "OwnerAdded(address,address)": EventFragment;
    "OwnerRemoved(address,address)": EventFragment;
    "ProposalDiscarded(address,uint256,address)": EventFragment;
    "ProposalSubmitted(address,uint256,address,address)": EventFragment;
    "QuorumNotReached(address,uint256,address,uint256)": EventFragment;
    "TryExecuteUnsuccessful(uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GuardianAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleInstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleUninstalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalDiscarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumNotReached"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TryExecuteUnsuccessful"): EventFragment;
}

export interface GuardianAddedEventObject {
  account: string;
  newGuardian: string;
}
export type GuardianAddedEvent = TypedEvent<
  [string, string],
  GuardianAddedEventObject
>;

export type GuardianAddedEventFilter = TypedEventFilter<GuardianAddedEvent>;

export interface GuardianRemovedEventObject {
  account: string;
  removedGuardian: string;
}
export type GuardianRemovedEvent = TypedEvent<
  [string, string],
  GuardianRemovedEventObject
>;

export type GuardianRemovedEventFilter = TypedEventFilter<GuardianRemovedEvent>;

export interface ModuleInstalledEventObject {
  moduleTypeId: BigNumber;
  module: string;
}
export type ModuleInstalledEvent = TypedEvent<
  [BigNumber, string],
  ModuleInstalledEventObject
>;

export type ModuleInstalledEventFilter = TypedEventFilter<ModuleInstalledEvent>;

export interface ModuleUninstalledEventObject {
  moduleTypeId: BigNumber;
  module: string;
}
export type ModuleUninstalledEvent = TypedEvent<
  [BigNumber, string],
  ModuleUninstalledEventObject
>;

export type ModuleUninstalledEventFilter =
  TypedEventFilter<ModuleUninstalledEvent>;

export interface OwnerAddedEventObject {
  account: string;
  newOwner: string;
}
export type OwnerAddedEvent = TypedEvent<
  [string, string],
  OwnerAddedEventObject
>;

export type OwnerAddedEventFilter = TypedEventFilter<OwnerAddedEvent>;

export interface OwnerRemovedEventObject {
  account: string;
  removedOwner: string;
}
export type OwnerRemovedEvent = TypedEvent<
  [string, string],
  OwnerRemovedEventObject
>;

export type OwnerRemovedEventFilter = TypedEventFilter<OwnerRemovedEvent>;

export interface ProposalDiscardedEventObject {
  account: string;
  proposalId: BigNumber;
  discardedBy: string;
}
export type ProposalDiscardedEvent = TypedEvent<
  [string, BigNumber, string],
  ProposalDiscardedEventObject
>;

export type ProposalDiscardedEventFilter =
  TypedEventFilter<ProposalDiscardedEvent>;

export interface ProposalSubmittedEventObject {
  account: string;
  proposalId: BigNumber;
  newOwnerProposed: string;
  proposer: string;
}
export type ProposalSubmittedEvent = TypedEvent<
  [string, BigNumber, string, string],
  ProposalSubmittedEventObject
>;

export type ProposalSubmittedEventFilter =
  TypedEventFilter<ProposalSubmittedEvent>;

export interface QuorumNotReachedEventObject {
  account: string;
  proposalId: BigNumber;
  newOwnerProposed: string;
  approvalCount: BigNumber;
}
export type QuorumNotReachedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  QuorumNotReachedEventObject
>;

export type QuorumNotReachedEventFilter =
  TypedEventFilter<QuorumNotReachedEvent>;

export interface TryExecuteUnsuccessfulEventObject {
  batchExecutionindex: BigNumber;
  result: string;
}
export type TryExecuteUnsuccessfulEvent = TypedEvent<
  [BigNumber, string],
  TryExecuteUnsuccessfulEventObject
>;

export type TryExecuteUnsuccessfulEventFilter =
  TypedEventFilter<TryExecuteUnsuccessfulEvent>;

export interface ModularEtherspotWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ModularEtherspotWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountId(overrides?: CallOverrides): Promise<[string]>;

    addGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeProposalTimelock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    discardCurrentProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    execute(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeFromExecutor(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUserOp(
      userOp: PackedUserOperationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveFallbackHandler(
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ModuleManager.FallbackHandlerStructOutput]>;

    getActiveHook(
      overrides?: CallOverrides
    ): Promise<[string] & { hook: string }>;

    getExecutorsPaginated(
      cursor: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string[], boolean, BigNumber] & {
        ownerProposed_: string;
        approvalCount_: BigNumber;
        guardiansApproved_: string[];
        resolved_: boolean;
        proposedAt_: BigNumber;
      }
    >;

    getValidatorPaginated(
      cursor: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    guardianCosign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    guardianCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    guardianPropose(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initializeAccount(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      initData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isGuardian(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isModuleInstalled(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      additionalContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsExecutionMode(
      mode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isSupported: boolean }>;

    supportsModule(
      modulTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uninstallModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      deInitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateUserOp(
      userOp: PackedUserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accountId(overrides?: CallOverrides): Promise<string>;

  addGuardian(
    _newGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOwner(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeProposalTimelock(
    _newTimelock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  discardCurrentProposal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entryPoint(overrides?: CallOverrides): Promise<string>;

  execute(
    mode: PromiseOrValue<BytesLike>,
    executionCalldata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeFromExecutor(
    mode: PromiseOrValue<BytesLike>,
    executionCalldata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUserOp(
    userOp: PackedUserOperationStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveFallbackHandler(
    functionSig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ModuleManager.FallbackHandlerStructOutput>;

  getActiveHook(overrides?: CallOverrides): Promise<string>;

  getExecutorsPaginated(
    cursor: PromiseOrValue<string>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  getProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string[], boolean, BigNumber] & {
      ownerProposed_: string;
      approvalCount_: BigNumber;
      guardiansApproved_: string[];
      resolved_: boolean;
      proposedAt_: BigNumber;
    }
  >;

  getValidatorPaginated(
    cursor: PromiseOrValue<string>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  guardianCosign(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

  guardianPropose(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initializeAccount(
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installModule(
    moduleTypeId: PromiseOrValue<BigNumberish>,
    module: PromiseOrValue<string>,
    initData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isGuardian(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isModuleInstalled(
    moduleTypeId: PromiseOrValue<BigNumberish>,
    module: PromiseOrValue<string>,
    additionalContext: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSignature(
    hash: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposalId(overrides?: CallOverrides): Promise<BigNumber>;

  proposalTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  removeGuardian(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsExecutionMode(
    mode: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsModule(
    modulTypeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uninstallModule(
    moduleTypeId: PromiseOrValue<BigNumberish>,
    module: PromiseOrValue<string>,
    deInitData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateUserOp(
    userOp: PackedUserOperationStruct,
    userOpHash: PromiseOrValue<BytesLike>,
    missingAccountFunds: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountId(overrides?: CallOverrides): Promise<string>;

    addGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProposalTimelock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    discardCurrentProposal(overrides?: CallOverrides): Promise<void>;

    entryPoint(overrides?: CallOverrides): Promise<string>;

    execute(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeFromExecutor(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    executeUserOp(
      userOp: PackedUserOperationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveFallbackHandler(
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ModuleManager.FallbackHandlerStructOutput>;

    getActiveHook(overrides?: CallOverrides): Promise<string>;

    getExecutorsPaginated(
      cursor: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string[], boolean, BigNumber] & {
        ownerProposed_: string;
        approvalCount_: BigNumber;
        guardiansApproved_: string[];
        resolved_: boolean;
        proposedAt_: BigNumber;
      }
    >;

    getValidatorPaginated(
      cursor: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    guardianCosign(overrides?: CallOverrides): Promise<void>;

    guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

    guardianPropose(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initializeAccount(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    installModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      initData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isGuardian(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isModuleInstalled(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      additionalContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalId(overrides?: CallOverrides): Promise<BigNumber>;

    proposalTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    removeGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsExecutionMode(
      mode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsModule(
      modulTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uninstallModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      deInitData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUserOp(
      userOp: PackedUserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "GuardianAdded(address,address)"(
      account?: null,
      newGuardian?: null
    ): GuardianAddedEventFilter;
    GuardianAdded(account?: null, newGuardian?: null): GuardianAddedEventFilter;

    "GuardianRemoved(address,address)"(
      account?: null,
      removedGuardian?: null
    ): GuardianRemovedEventFilter;
    GuardianRemoved(
      account?: null,
      removedGuardian?: null
    ): GuardianRemovedEventFilter;

    "ModuleInstalled(uint256,address)"(
      moduleTypeId?: null,
      module?: null
    ): ModuleInstalledEventFilter;
    ModuleInstalled(
      moduleTypeId?: null,
      module?: null
    ): ModuleInstalledEventFilter;

    "ModuleUninstalled(uint256,address)"(
      moduleTypeId?: null,
      module?: null
    ): ModuleUninstalledEventFilter;
    ModuleUninstalled(
      moduleTypeId?: null,
      module?: null
    ): ModuleUninstalledEventFilter;

    "OwnerAdded(address,address)"(
      account?: null,
      newOwner?: null
    ): OwnerAddedEventFilter;
    OwnerAdded(account?: null, newOwner?: null): OwnerAddedEventFilter;

    "OwnerRemoved(address,address)"(
      account?: null,
      removedOwner?: null
    ): OwnerRemovedEventFilter;
    OwnerRemoved(account?: null, removedOwner?: null): OwnerRemovedEventFilter;

    "ProposalDiscarded(address,uint256,address)"(
      account?: null,
      proposalId?: null,
      discardedBy?: null
    ): ProposalDiscardedEventFilter;
    ProposalDiscarded(
      account?: null,
      proposalId?: null,
      discardedBy?: null
    ): ProposalDiscardedEventFilter;

    "ProposalSubmitted(address,uint256,address,address)"(
      account?: null,
      proposalId?: null,
      newOwnerProposed?: null,
      proposer?: null
    ): ProposalSubmittedEventFilter;
    ProposalSubmitted(
      account?: null,
      proposalId?: null,
      newOwnerProposed?: null,
      proposer?: null
    ): ProposalSubmittedEventFilter;

    "QuorumNotReached(address,uint256,address,uint256)"(
      account?: null,
      proposalId?: null,
      newOwnerProposed?: null,
      approvalCount?: null
    ): QuorumNotReachedEventFilter;
    QuorumNotReached(
      account?: null,
      proposalId?: null,
      newOwnerProposed?: null,
      approvalCount?: null
    ): QuorumNotReachedEventFilter;

    "TryExecuteUnsuccessful(uint256,bytes)"(
      batchExecutionindex?: null,
      result?: null
    ): TryExecuteUnsuccessfulEventFilter;
    TryExecuteUnsuccessful(
      batchExecutionindex?: null,
      result?: null
    ): TryExecuteUnsuccessfulEventFilter;
  };

  estimateGas: {
    accountId(overrides?: CallOverrides): Promise<BigNumber>;

    addGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeProposalTimelock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    discardCurrentProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeFromExecutor(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUserOp(
      userOp: PackedUserOperationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveFallbackHandler(
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveHook(overrides?: CallOverrides): Promise<BigNumber>;

    getExecutorsPaginated(
      cursor: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorPaginated(
      cursor: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardianCosign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

    guardianPropose(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initializeAccount(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      initData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isGuardian(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isModuleInstalled(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      additionalContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalId(overrides?: CallOverrides): Promise<BigNumber>;

    proposalTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    removeGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsExecutionMode(
      mode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsModule(
      modulTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uninstallModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      deInitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: PackedUserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeProposalTimelock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    discardCurrentProposal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeFromExecutor(
      mode: PromiseOrValue<BytesLike>,
      executionCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUserOp(
      userOp: PackedUserOperationStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveFallbackHandler(
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExecutorsPaginated(
      cursor: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorPaginated(
      cursor: PromiseOrValue<string>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardianCosign(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    guardianCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardianPropose(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeAccount(
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      initData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isGuardian(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isModuleInstalled(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      additionalContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalTimelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsExecutionMode(
      mode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsModule(
      modulTypeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uninstallModule(
      moduleTypeId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      deInitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: PackedUserOperationStruct,
      userOpHash: PromiseOrValue<BytesLike>,
      missingAccountFunds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}