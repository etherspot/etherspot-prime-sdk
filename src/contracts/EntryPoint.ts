/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DepositInfoStruct = {
  deposit: BigNumberish;
  staked: boolean;
  stake: BigNumberish;
  unstakeDelaySec: BigNumberish;
  withdrawTime: BigNumberish;
};

export type DepositInfoStructOutput = [
  BigNumber,
  boolean,
  BigNumber,
  number,
  BigNumber
] & {
  deposit: BigNumber;
  staked: boolean;
  stake: BigNumber;
  unstakeDelaySec: number;
  withdrawTime: BigNumber;
};

export type UserOperationStruct = {
  sender: string;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export type UserOpsPerAggregatorStruct = {
  userOps: UserOperationStruct[];
  aggregator: string;
  signature: BytesLike;
};

export type UserOpsPerAggregatorStructOutput = [
  UserOperationStructOutput[],
  string,
  string
] & {
  userOps: UserOperationStructOutput[];
  aggregator: string;
  signature: string;
};

export type MemoryUserOpStruct = {
  sender: string;
  nonce: BigNumberish;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  paymaster: string;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
};

export type MemoryUserOpStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber
] & {
  sender: string;
  nonce: BigNumber;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  paymaster: string;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
};

export type UserOpInfoStruct = {
  mUserOp: MemoryUserOpStruct;
  userOpHash: BytesLike;
  prefund: BigNumberish;
  contextOffset: BigNumberish;
  preOpGas: BigNumberish;
};

export type UserOpInfoStructOutput = [
  MemoryUserOpStructOutput,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  mUserOp: MemoryUserOpStructOutput;
  userOpHash: string;
  prefund: BigNumber;
  contextOffset: BigNumber;
  preOpGas: BigNumber;
};

export interface EntryPointInterface extends utils.Interface {
  functions: {
    "SIG_VALIDATION_FAILED()": FunctionFragment;
    "_simulateFindAggregator(address,address)": FunctionFragment;
    "addStake(uint32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "depositTo(address)": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "getDepositInfo(address)": FunctionFragment;
    "getSenderAddress(bytes)": FunctionFragment;
    "getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)": FunctionFragment;
    "handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)": FunctionFragment;
    "innerHandleOp(bytes,((address,uint256,uint256,uint256,uint256,address,uint256,uint256),bytes32,uint256,uint256,uint256),bytes)": FunctionFragment;
    "simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "unlockStake()": FunctionFragment;
    "withdrawStake(address)": FunctionFragment;
    "withdrawTo(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SIG_VALIDATION_FAILED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_simulateFindAggregator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "depositTo", values: [string]): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDepositInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOpHash",
    values: [UserOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "handleAggregatedOps",
    values: [UserOpsPerAggregatorStruct[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOps",
    values: [UserOperationStruct[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "innerHandleOp",
    values: [BytesLike, UserOpInfoStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateHandleOp",
    values: [UserOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateValidation",
    values: [UserOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SIG_VALIDATION_FAILED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_simulateFindAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOpHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleAggregatedOps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleOps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "innerHandleOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateHandleOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "AccountDeployed(bytes32,address,address,address)": EventFragment;
    "Deposited(address,uint256)": EventFragment;
    "SignatureAggregatorChanged(address)": EventFragment;
    "StakeLocked(address,uint256,uint256)": EventFragment;
    "StakeUnlocked(address,uint256)": EventFragment;
    "StakeWithdrawn(address,address,uint256)": EventFragment;
    "UserOperationEvent(bytes32,address,address,uint256,bool,uint256,uint256)": EventFragment;
    "UserOperationRevertReason(bytes32,address,uint256,bytes)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignatureAggregatorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserOperationEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserOperationRevertReason"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type AccountDeployedEvent = TypedEvent<
  [string, string, string, string],
  { userOpHash: string; sender: string; factory: string; paymaster: string }
>;

export type AccountDeployedEventFilter = TypedEventFilter<AccountDeployedEvent>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; totalDeposit: BigNumber }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type SignatureAggregatorChangedEvent = TypedEvent<
  [string],
  { aggregator: string }
>;

export type SignatureAggregatorChangedEventFilter =
  TypedEventFilter<SignatureAggregatorChangedEvent>;

export type StakeLockedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; totalStaked: BigNumber; withdrawTime: BigNumber }
>;

export type StakeLockedEventFilter = TypedEventFilter<StakeLockedEvent>;

export type StakeUnlockedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; withdrawTime: BigNumber }
>;

export type StakeUnlockedEventFilter = TypedEventFilter<StakeUnlockedEvent>;

export type StakeWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; withdrawAddress: string; amount: BigNumber }
>;

export type StakeWithdrawnEventFilter = TypedEventFilter<StakeWithdrawnEvent>;

export type UserOperationEventEvent = TypedEvent<
  [string, string, string, BigNumber, boolean, BigNumber, BigNumber],
  {
    userOpHash: string;
    sender: string;
    paymaster: string;
    nonce: BigNumber;
    success: boolean;
    actualGasCost: BigNumber;
    actualGasUsed: BigNumber;
  }
>;

export type UserOperationEventEventFilter =
  TypedEventFilter<UserOperationEventEvent>;

export type UserOperationRevertReasonEvent = TypedEvent<
  [string, string, BigNumber, string],
  { userOpHash: string; sender: string; nonce: BigNumber; revertReason: string }
>;

export type UserOperationRevertReasonEventFilter =
  TypedEventFilter<UserOperationRevertReasonEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; withdrawAddress: string; amount: BigNumber }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface EntryPoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EntryPointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<[BigNumber]>;

    _simulateFindAggregator(
      sender: string,
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositTo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber] & {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: BigNumber;
      }
    >;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<[DepositInfoStructOutput] & { info: DepositInfoStructOutput }>;

    getSenderAddress(
      initCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserOpHash(
      userOp: UserOperationStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handleAggregatedOps(
      opsPerAggregator: UserOpsPerAggregatorStruct[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handleOps(
      ops: UserOperationStruct[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    innerHandleOp(
      callData: BytesLike,
      opInfo: UserOpInfoStruct,
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    simulateHandleOp(
      op: UserOperationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    simulateValidation(
      userOp: UserOperationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

  _simulateFindAggregator(
    sender: string,
    paymaster: string,
    overrides?: CallOverrides
  ): Promise<void>;

  addStake(
    _unstakeDelaySec: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositTo(
    account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, number, BigNumber] & {
      deposit: BigNumber;
      staked: boolean;
      stake: BigNumber;
      unstakeDelaySec: number;
      withdrawTime: BigNumber;
    }
  >;

  getDepositInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<DepositInfoStructOutput>;

  getSenderAddress(
    initCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserOpHash(
    userOp: UserOperationStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  handleAggregatedOps(
    opsPerAggregator: UserOpsPerAggregatorStruct[],
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handleOps(
    ops: UserOperationStruct[],
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  innerHandleOp(
    callData: BytesLike,
    opInfo: UserOpInfoStruct,
    context: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  simulateHandleOp(
    op: UserOperationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  simulateValidation(
    userOp: UserOperationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockStake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    withdrawAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    withdrawAddress: string,
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

    _simulateFindAggregator(
      sender: string,
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositTo(account: string, overrides?: CallOverrides): Promise<void>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber] & {
        deposit: BigNumber;
        staked: boolean;
        stake: BigNumber;
        unstakeDelaySec: number;
        withdrawTime: BigNumber;
      }
    >;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<DepositInfoStructOutput>;

    getSenderAddress(
      initCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserOpHash(
      userOp: UserOperationStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    handleAggregatedOps(
      opsPerAggregator: UserOpsPerAggregatorStruct[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    handleOps(
      ops: UserOperationStruct[],
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    innerHandleOp(
      callData: BytesLike,
      opInfo: UserOpInfoStruct,
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulateHandleOp(
      op: UserOperationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateValidation(
      userOp: UserOperationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockStake(overrides?: CallOverrides): Promise<void>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountDeployed(bytes32,address,address,address)"(
      userOpHash?: BytesLike | null,
      sender?: string | null,
      factory?: null,
      paymaster?: null
    ): AccountDeployedEventFilter;
    AccountDeployed(
      userOpHash?: BytesLike | null,
      sender?: string | null,
      factory?: null,
      paymaster?: null
    ): AccountDeployedEventFilter;

    "Deposited(address,uint256)"(
      account?: string | null,
      totalDeposit?: null
    ): DepositedEventFilter;
    Deposited(
      account?: string | null,
      totalDeposit?: null
    ): DepositedEventFilter;

    "SignatureAggregatorChanged(address)"(
      aggregator?: null
    ): SignatureAggregatorChangedEventFilter;
    SignatureAggregatorChanged(
      aggregator?: null
    ): SignatureAggregatorChangedEventFilter;

    "StakeLocked(address,uint256,uint256)"(
      account?: string | null,
      totalStaked?: null,
      withdrawTime?: null
    ): StakeLockedEventFilter;
    StakeLocked(
      account?: string | null,
      totalStaked?: null,
      withdrawTime?: null
    ): StakeLockedEventFilter;

    "StakeUnlocked(address,uint256)"(
      account?: string | null,
      withdrawTime?: null
    ): StakeUnlockedEventFilter;
    StakeUnlocked(
      account?: string | null,
      withdrawTime?: null
    ): StakeUnlockedEventFilter;

    "StakeWithdrawn(address,address,uint256)"(
      account?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): StakeWithdrawnEventFilter;
    StakeWithdrawn(
      account?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): StakeWithdrawnEventFilter;

    "UserOperationEvent(bytes32,address,address,uint256,bool,uint256,uint256)"(
      userOpHash?: BytesLike | null,
      sender?: string | null,
      paymaster?: string | null,
      nonce?: null,
      success?: null,
      actualGasCost?: null,
      actualGasUsed?: null
    ): UserOperationEventEventFilter;
    UserOperationEvent(
      userOpHash?: BytesLike | null,
      sender?: string | null,
      paymaster?: string | null,
      nonce?: null,
      success?: null,
      actualGasCost?: null,
      actualGasUsed?: null
    ): UserOperationEventEventFilter;

    "UserOperationRevertReason(bytes32,address,uint256,bytes)"(
      userOpHash?: BytesLike | null,
      sender?: string | null,
      nonce?: null,
      revertReason?: null
    ): UserOperationRevertReasonEventFilter;
    UserOperationRevertReason(
      userOpHash?: BytesLike | null,
      sender?: string | null,
      nonce?: null,
      revertReason?: null
    ): UserOperationRevertReasonEventFilter;

    "Withdrawn(address,address,uint256)"(
      account?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      account?: string | null,
      withdrawAddress?: null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    SIG_VALIDATION_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

    _simulateFindAggregator(
      sender: string,
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositTo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSenderAddress(
      initCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserOpHash(
      userOp: UserOperationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleAggregatedOps(
      opsPerAggregator: UserOpsPerAggregatorStruct[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handleOps(
      ops: UserOperationStruct[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    innerHandleOp(
      callData: BytesLike,
      opInfo: UserOpInfoStruct,
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    simulateHandleOp(
      op: UserOperationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    simulateValidation(
      userOp: UserOperationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SIG_VALIDATION_FAILED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _simulateFindAggregator(
      sender: string,
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStake(
      _unstakeDelaySec: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositTo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSenderAddress(
      initCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserOpHash(
      userOp: UserOperationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleAggregatedOps(
      opsPerAggregator: UserOpsPerAggregatorStruct[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handleOps(
      ops: UserOperationStruct[],
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    innerHandleOp(
      callData: BytesLike,
      opInfo: UserOpInfoStruct,
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    simulateHandleOp(
      op: UserOperationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    simulateValidation(
      userOp: UserOperationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockStake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      withdrawAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      withdrawAddress: string,
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
