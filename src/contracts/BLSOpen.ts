/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BLSOpenInterface extends utils.Interface {
  functions: {
    "hashToPoint(bytes32,bytes)": FunctionFragment;
    "isZeroBLSKey(uint256[4])": FunctionFragment;
    "verifyMultiple(uint256[2],uint256[4][],uint256[2][])": FunctionFragment;
    "verifySingle(uint256[2],uint256[4],uint256[2])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hashToPoint",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isZeroBLSKey",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMultiple",
    values: [
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      [BigNumberish, BigNumberish][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySingle",
    values: [
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "hashToPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isZeroBLSKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySingle",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BLSOpen extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BLSOpenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hashToPoint(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    isZeroBLSKey(
      blsKey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyMultiple(
      signature: [BigNumberish, BigNumberish],
      pubkeys: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      messages: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifySingle(
      signature: [BigNumberish, BigNumberish],
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      message: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  hashToPoint(
    domain: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  isZeroBLSKey(
    blsKey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyMultiple(
    signature: [BigNumberish, BigNumberish],
    pubkeys: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
    messages: [BigNumberish, BigNumberish][],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifySingle(
    signature: [BigNumberish, BigNumberish],
    pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    message: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    hashToPoint(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isZeroBLSKey(
      blsKey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyMultiple(
      signature: [BigNumberish, BigNumberish],
      pubkeys: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      messages: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifySingle(
      signature: [BigNumberish, BigNumberish],
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      message: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    hashToPoint(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isZeroBLSKey(
      blsKey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMultiple(
      signature: [BigNumberish, BigNumberish],
      pubkeys: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      messages: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySingle(
      signature: [BigNumberish, BigNumberish],
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      message: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hashToPoint(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isZeroBLSKey(
      blsKey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMultiple(
      signature: [BigNumberish, BigNumberish],
      pubkeys: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      messages: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySingle(
      signature: [BigNumberish, BigNumberish],
      pubkey: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      message: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
