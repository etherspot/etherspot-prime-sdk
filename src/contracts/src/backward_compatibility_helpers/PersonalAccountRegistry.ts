/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PersonalAccountRegistryInterface extends utils.Interface {
  functions: {
    "accountImplementation()": FunctionFragment;
    "accountRegistry()": FunctionFragment;
    "addAccountOwner(address,address)": FunctionFragment;
    "computeAccountAddress(address)": FunctionFragment;
    "deployAccount(address)": FunctionFragment;
    "executeAccountTransaction(address,address,uint256,bytes)": FunctionFragment;
    "gateway()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isAccountDeployed(address)": FunctionFragment;
    "isValidAccountSignature(address,bytes,bytes)": FunctionFragment;
    "isValidAccountSignature(address,bytes32,bytes)": FunctionFragment;
    "refundAccountCall(address,address,uint256)": FunctionFragment;
    "removeAccountOwner(address,address)": FunctionFragment;
    "upgrade(address)": FunctionFragment;
    "upgradeAccount(address)": FunctionFragment;
    "verifyAccountOwner(address,address)": FunctionFragment;
    "verifyAccountOwnerAtBlock(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountImplementation"
      | "accountRegistry"
      | "addAccountOwner"
      | "computeAccountAddress"
      | "deployAccount"
      | "executeAccountTransaction"
      | "gateway"
      | "initialize"
      | "isAccountDeployed"
      | "isValidAccountSignature(address,bytes,bytes)"
      | "isValidAccountSignature(address,bytes32,bytes)"
      | "refundAccountCall"
      | "removeAccountOwner"
      | "upgrade"
      | "upgradeAccount"
      | "verifyAccountOwner"
      | "verifyAccountOwnerAtBlock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAccountOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAccountAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAccountTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountDeployed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAccountSignature(address,bytes,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAccountSignature(address,bytes32,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refundAccountCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAccountOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAccountOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAccountOwnerAtBlock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAccountOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAccountAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAccountTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAccountSignature(address,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAccountSignature(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundAccountCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAccountOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAccountOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAccountOwnerAtBlock",
    data: BytesLike
  ): Result;

  events: {
    "AccountCallRefunded(address,address,address,uint256)": EventFragment;
    "AccountDeployed(address,address)": EventFragment;
    "AccountImplementationUpdated(address)": EventFragment;
    "AccountOwnerAdded(address,address)": EventFragment;
    "AccountOwnerRemoved(address,address)": EventFragment;
    "AccountRegistryUpdated(address)": EventFragment;
    "AccountTransactionExecuted(address,address,uint256,bytes,bytes)": EventFragment;
    "AccountUpgraded(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCallRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AccountImplementationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountOwnerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountOwnerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountRegistryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface AccountCallRefundedEventObject {
  account: string;
  beneficiary: string;
  token: string;
  value: BigNumber;
}
export type AccountCallRefundedEvent = TypedEvent<
  [string, string, string, BigNumber],
  AccountCallRefundedEventObject
>;

export type AccountCallRefundedEventFilter =
  TypedEventFilter<AccountCallRefundedEvent>;

export interface AccountDeployedEventObject {
  account: string;
  accountImplementation: string;
}
export type AccountDeployedEvent = TypedEvent<
  [string, string],
  AccountDeployedEventObject
>;

export type AccountDeployedEventFilter = TypedEventFilter<AccountDeployedEvent>;

export interface AccountImplementationUpdatedEventObject {
  accountImplementation: string;
}
export type AccountImplementationUpdatedEvent = TypedEvent<
  [string],
  AccountImplementationUpdatedEventObject
>;

export type AccountImplementationUpdatedEventFilter =
  TypedEventFilter<AccountImplementationUpdatedEvent>;

export interface AccountOwnerAddedEventObject {
  account: string;
  owner: string;
}
export type AccountOwnerAddedEvent = TypedEvent<
  [string, string],
  AccountOwnerAddedEventObject
>;

export type AccountOwnerAddedEventFilter =
  TypedEventFilter<AccountOwnerAddedEvent>;

export interface AccountOwnerRemovedEventObject {
  account: string;
  owner: string;
}
export type AccountOwnerRemovedEvent = TypedEvent<
  [string, string],
  AccountOwnerRemovedEventObject
>;

export type AccountOwnerRemovedEventFilter =
  TypedEventFilter<AccountOwnerRemovedEvent>;

export interface AccountRegistryUpdatedEventObject {
  accountRegistry: string;
}
export type AccountRegistryUpdatedEvent = TypedEvent<
  [string],
  AccountRegistryUpdatedEventObject
>;

export type AccountRegistryUpdatedEventFilter =
  TypedEventFilter<AccountRegistryUpdatedEvent>;

export interface AccountTransactionExecutedEventObject {
  account: string;
  to: string;
  value: BigNumber;
  data: string;
  response: string;
}
export type AccountTransactionExecutedEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  AccountTransactionExecutedEventObject
>;

export type AccountTransactionExecutedEventFilter =
  TypedEventFilter<AccountTransactionExecutedEvent>;

export interface AccountUpgradedEventObject {
  account: string;
  accountImplementation: string;
}
export type AccountUpgradedEvent = TypedEvent<
  [string, string],
  AccountUpgradedEventObject
>;

export type AccountUpgradedEventFilter = TypedEventFilter<AccountUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PersonalAccountRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PersonalAccountRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountImplementation(overrides?: CallOverrides): Promise<[string]>;

    accountRegistry(overrides?: CallOverrides): Promise<[string]>;

    addAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeAccountAddress(
      saltOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeAccountTransaction(
      account: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      accountImplementation_: PromiseOrValue<string>,
      gateway_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAccountDeployed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidAccountSignature(address,bytes,bytes)"(
      account: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidAccountSignature(address,bytes32,bytes)"(
      account: PromiseOrValue<string>,
      messageHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    refundAccountCall(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      accountImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyAccountOwnerAtBlock(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  accountImplementation(overrides?: CallOverrides): Promise<string>;

  accountRegistry(overrides?: CallOverrides): Promise<string>;

  addAccountOwner(
    account: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeAccountAddress(
    saltOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  deployAccount(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeAccountTransaction(
    account: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gateway(overrides?: CallOverrides): Promise<string>;

  initialize(
    accountImplementation_: PromiseOrValue<string>,
    gateway_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAccountDeployed(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidAccountSignature(address,bytes,bytes)"(
    account: PromiseOrValue<string>,
    message: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidAccountSignature(address,bytes32,bytes)"(
    account: PromiseOrValue<string>,
    messageHash: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  refundAccountCall(
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAccountOwner(
    account: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    accountImplementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeAccount(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyAccountOwner(
    account: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyAccountOwnerAtBlock(
    account: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    accountImplementation(overrides?: CallOverrides): Promise<string>;

    accountRegistry(overrides?: CallOverrides): Promise<string>;

    addAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeAccountAddress(
      saltOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeAccountTransaction(
      account: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    gateway(overrides?: CallOverrides): Promise<string>;

    initialize(
      accountImplementation_: PromiseOrValue<string>,
      gateway_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAccountDeployed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidAccountSignature(address,bytes,bytes)"(
      account: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidAccountSignature(address,bytes32,bytes)"(
      account: PromiseOrValue<string>,
      messageHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    refundAccountCall(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(
      accountImplementation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeAccount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyAccountOwnerAtBlock(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AccountCallRefunded(address,address,address,uint256)"(
      account?: null,
      beneficiary?: null,
      token?: null,
      value?: null
    ): AccountCallRefundedEventFilter;
    AccountCallRefunded(
      account?: null,
      beneficiary?: null,
      token?: null,
      value?: null
    ): AccountCallRefundedEventFilter;

    "AccountDeployed(address,address)"(
      account?: null,
      accountImplementation?: null
    ): AccountDeployedEventFilter;
    AccountDeployed(
      account?: null,
      accountImplementation?: null
    ): AccountDeployedEventFilter;

    "AccountImplementationUpdated(address)"(
      accountImplementation?: null
    ): AccountImplementationUpdatedEventFilter;
    AccountImplementationUpdated(
      accountImplementation?: null
    ): AccountImplementationUpdatedEventFilter;

    "AccountOwnerAdded(address,address)"(
      account?: null,
      owner?: null
    ): AccountOwnerAddedEventFilter;
    AccountOwnerAdded(
      account?: null,
      owner?: null
    ): AccountOwnerAddedEventFilter;

    "AccountOwnerRemoved(address,address)"(
      account?: null,
      owner?: null
    ): AccountOwnerRemovedEventFilter;
    AccountOwnerRemoved(
      account?: null,
      owner?: null
    ): AccountOwnerRemovedEventFilter;

    "AccountRegistryUpdated(address)"(
      accountRegistry?: null
    ): AccountRegistryUpdatedEventFilter;
    AccountRegistryUpdated(
      accountRegistry?: null
    ): AccountRegistryUpdatedEventFilter;

    "AccountTransactionExecuted(address,address,uint256,bytes,bytes)"(
      account?: null,
      to?: null,
      value?: null,
      data?: null,
      response?: null
    ): AccountTransactionExecutedEventFilter;
    AccountTransactionExecuted(
      account?: null,
      to?: null,
      value?: null,
      data?: null,
      response?: null
    ): AccountTransactionExecutedEventFilter;

    "AccountUpgraded(address,address)"(
      account?: null,
      accountImplementation?: null
    ): AccountUpgradedEventFilter;
    AccountUpgraded(
      account?: null,
      accountImplementation?: null
    ): AccountUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    accountImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    accountRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    addAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeAccountAddress(
      saltOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeAccountTransaction(
      account: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      accountImplementation_: PromiseOrValue<string>,
      gateway_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAccountDeployed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidAccountSignature(address,bytes,bytes)"(
      account: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidAccountSignature(address,bytes32,bytes)"(
      account: PromiseOrValue<string>,
      messageHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundAccountCall(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgrade(
      accountImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAccountOwnerAtBlock(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeAccountAddress(
      saltOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeAccountTransaction(
      account: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      accountImplementation_: PromiseOrValue<string>,
      gateway_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAccountDeployed(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidAccountSignature(address,bytes,bytes)"(
      account: PromiseOrValue<string>,
      message: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidAccountSignature(address,bytes32,bytes)"(
      account: PromiseOrValue<string>,
      messageHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundAccountCall(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      accountImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeAccount(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyAccountOwner(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAccountOwnerAtBlock(
      account: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
