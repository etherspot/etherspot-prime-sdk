/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestUtil,
  TestUtilInterface,
} from "../../../../src/aa-4337/test/TestUtil";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "op",
        type: "tuple",
      },
    ],
    name: "packUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610318806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633a24dea414610030575b600080fd5b61004a60048036038101906100459190610175565b610060565b604051610057919061024e565b60405180910390f35b606061007667e5a92ca07783c4ae60c01b6100ae565b61008a6714b78b122a242c4560c01b6100ae565b61009e673b52136f56973b3060c01b6100ae565b6100a7826100b1565b9050919050565b50565b60606100c7670dec2dbb958a50d860c01b610143565b6100db67f7ebcbf78dfbd2e760c01b610143565b6100ef67cf9d9e801922f74560c01b610143565b36600083806101400190610103919061027f565b9150915061011b670c9fe5e21e8be86a60c01b610143565b8360208184030360405194506020810185016040528085528082602087013750505050919050565b50565b600080fd5b600080fd5b600080fd5b6000610160828403121561016c5761016b610150565b5b81905092915050565b60006020828403121561018b5761018a610146565b5b600082013567ffffffffffffffff8111156101a9576101a861014b565b5b6101b584828501610155565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101f85780820151818401526020810190506101dd565b60008484015250505050565b6000601f19601f8301169050919050565b6000610220826101be565b61022a81856101c9565b935061023a8185602086016101da565b61024381610204565b840191505092915050565b600060208201905081810360008301526102688184610215565b905092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261029c5761029b610270565b5b80840192508235915067ffffffffffffffff8211156102be576102bd610275565b5b6020830192506001820236038313156102da576102d961027a565b5b50925092905056fea2646970667358221220da5364a0a7b8da3ef9f0ae6f549590797ca6c4663a3969b86e0902e6aace3f1864736f6c63430008110033";

type TestUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUtil__factory extends ContractFactory {
  constructor(...args: TestUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestUtil> {
    return super.deploy(overrides || {}) as Promise<TestUtil>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestUtil {
    return super.attach(address) as TestUtil;
  }
  override connect(signer: Signer): TestUtil__factory {
    return super.connect(signer) as TestUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUtilInterface {
    return new utils.Interface(_abi) as TestUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUtil {
    return new Contract(address, _abi, signerOrProvider) as TestUtil;
  }
}
