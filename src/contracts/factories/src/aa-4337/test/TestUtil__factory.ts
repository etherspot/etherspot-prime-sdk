/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestUtil,
  TestUtilInterface,
} from "../../../../src/aa-4337/test/TestUtil";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "op",
        type: "tuple",
      },
    ],
    name: "packUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061028f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633a24dea414610030575b600080fd5b61004a600480360381019061004591906100e3565b610060565b60405161005791906101c5565b60405180910390f35b606061006b82610072565b9050919050565b60603660008380610140019061008891906101f6565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b600080fd5b600080fd5b600080fd5b600061016082840312156100da576100d96100be565b5b81905092915050565b6000602082840312156100f9576100f86100b4565b5b600082013567ffffffffffffffff811115610117576101166100b9565b5b610123848285016100c3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561016657808201518184015260208101905061014b565b83811115610175576000848401525b50505050565b6000601f19601f8301169050919050565b60006101978261012c565b6101a18185610137565b93506101b1818560208601610148565b6101ba8161017b565b840191505092915050565b600060208201905081810360008301526101df818461018c565b905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610213576102126101e7565b5b80840192508235915067ffffffffffffffff821115610235576102346101ec565b5b602083019250600182023603831315610251576102506101f1565b5b50925092905056fea26469706673582212208b24beb83d15a14f11c70d5738f6d3dc9fe457722187988aab255e5df02fc39164736f6c634300080c0033";

type TestUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUtil__factory extends ContractFactory {
  constructor(...args: TestUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestUtil> {
    return super.deploy(overrides || {}) as Promise<TestUtil>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestUtil {
    return super.attach(address) as TestUtil;
  }
  override connect(signer: Signer): TestUtil__factory {
    return super.connect(signer) as TestUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUtilInterface {
    return new utils.Interface(_abi) as TestUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUtil {
    return new Contract(address, _abi, signerOrProvider) as TestUtil;
  }
}
