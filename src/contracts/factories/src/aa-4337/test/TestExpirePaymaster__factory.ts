/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestExpirePaymaster,
  TestExpirePaymasterInterface,
} from "../../../../src/aa-4337/test/TestExpirePaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001561380380620015618339818101604052810190620000379190620001de565b80620000586200004c6200009460201b60201c565b6200009c60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505062000210565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001928262000165565b9050919050565b6000620001a68262000185565b9050919050565b620001b88162000199565b8114620001c457600080fd5b50565b600081519050620001d881620001ad565b92915050565b600060208284031215620001f757620001f662000160565b5b60006200020784828501620001c7565b91505092915050565b6080516113046200025d6000396000818161026d01528181610304015281816103ec01528181610418015281816104a201528181610532015281816105d1015261084801526113046000f3fe6080604052600436106100a75760003560e01c8063bb9fe6bf11610064578063bb9fe6bf14610187578063c23a5cea1461019e578063c399ec88146101c7578063d0e30db0146101f2578063f2fde38b146101fc578063f465c77e14610225576100a7565b80630396cb60146100ac578063205c2878146100c8578063715018a6146100f15780638da5cb5b14610108578063a9a2340914610133578063b0d691fe1461015c575b600080fd5b6100c660048036038101906100c191906109fb565b610263565b005b3480156100d457600080fd5b506100ef60048036038101906100ea9190610abc565b6102fa565b005b3480156100fd57600080fd5b50610106610393565b005b34801561011457600080fd5b5061011d6103a7565b60405161012a9190610b1d565b60405180910390f35b34801561013f57600080fd5b5061015a60048036038101906101559190610bc2565b6103d0565b005b34801561016857600080fd5b506101716103ea565b60405161017e9190610c95565b60405180910390f35b34801561019357600080fd5b5061019c61040e565b005b3480156101aa57600080fd5b506101c560048036038101906101c09190610cb0565b610498565b005b3480156101d357600080fd5b506101dc61052e565b6040516101e99190610cec565b60405180910390f35b6101fa6105cf565b005b34801561020857600080fd5b50610223600480360381019061021e9190610d33565b61065d565b005b34801561023157600080fd5b5061024c60048036038101906102479190610dbb565b6106e1565b60405161025a929190610ec3565b60405180910390f35b61026b610704565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b81526004016102c59190610f02565b6000604051808303818588803b1580156102de57600080fd5b505af11580156102f2573d6000803e3d6000fd5b505050505050565b610302610704565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b815260040161035d929190610f2c565b600060405180830381600087803b15801561037757600080fd5b505af115801561038b573d6000803e3d6000fd5b505050505050565b61039b610704565b6103a56000610782565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103d8610846565b6103e4848484846108d6565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610416610704565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561047e57600080fd5b505af1158015610492573d6000803e3d6000fd5b50505050565b6104a0610704565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b81526004016104f99190610f55565b600060405180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105899190610b1d565b602060405180830381865afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190610f85565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b81526004016106299190610b1d565b6000604051808303818588803b15801561064257600080fd5b505af1158015610656573d6000803e3d6000fd5b5050505050565b610665610704565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cc90611035565b60405180910390fd5b6106de81610782565b50565b606060006106ed610846565b6106f8858585610911565b91509150935093915050565b61070c610974565b73ffffffffffffffffffffffffffffffffffffffff1661072a6103a7565b73ffffffffffffffffffffffffffffffffffffffff1614610780576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610777906110a1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb9061110d565b60405180910390fd5b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090890611179565b60405180910390fd5b6060600080808680610120019061092891906111a8565b601490809261093993929190611215565b810190610946919061128e565b915091506109566000828461097c565b92506040518060200160405280600081525093505050935093915050565b600033905090565b600060d08265ffffffffffff16901b60a08465ffffffffffff16901b856109a45760006109a7565b60015b60ff16171790509392505050565b600080fd5b600080fd5b600063ffffffff82169050919050565b6109d8816109bf565b81146109e357600080fd5b50565b6000813590506109f5816109cf565b92915050565b600060208284031215610a1157610a106109b5565b5b6000610a1f848285016109e6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5382610a28565b9050919050565b610a6381610a48565b8114610a6e57600080fd5b50565b600081359050610a8081610a5a565b92915050565b6000819050919050565b610a9981610a86565b8114610aa457600080fd5b50565b600081359050610ab681610a90565b92915050565b60008060408385031215610ad357610ad26109b5565b5b6000610ae185828601610a71565b9250506020610af285828601610aa7565b9150509250929050565b6000610b0782610a28565b9050919050565b610b1781610afc565b82525050565b6000602082019050610b326000830184610b0e565b92915050565b60038110610b4557600080fd5b50565b600081359050610b5781610b38565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610b8257610b81610b5d565b5b8235905067ffffffffffffffff811115610b9f57610b9e610b62565b5b602083019150836001820283011115610bbb57610bba610b67565b5b9250929050565b60008060008060608587031215610bdc57610bdb6109b5565b5b6000610bea87828801610b48565b945050602085013567ffffffffffffffff811115610c0b57610c0a6109ba565b5b610c1787828801610b6c565b93509350506040610c2a87828801610aa7565b91505092959194509250565b6000819050919050565b6000610c5b610c56610c5184610a28565b610c36565b610a28565b9050919050565b6000610c6d82610c40565b9050919050565b6000610c7f82610c62565b9050919050565b610c8f81610c74565b82525050565b6000602082019050610caa6000830184610c86565b92915050565b600060208284031215610cc657610cc56109b5565b5b6000610cd484828501610a71565b91505092915050565b610ce681610a86565b82525050565b6000602082019050610d016000830184610cdd565b92915050565b610d1081610afc565b8114610d1b57600080fd5b50565b600081359050610d2d81610d07565b92915050565b600060208284031215610d4957610d486109b5565b5b6000610d5784828501610d1e565b91505092915050565b600080fd5b60006101608284031215610d7c57610d7b610d60565b5b81905092915050565b6000819050919050565b610d9881610d85565b8114610da357600080fd5b50565b600081359050610db581610d8f565b92915050565b600080600060608486031215610dd457610dd36109b5565b5b600084013567ffffffffffffffff811115610df257610df16109ba565b5b610dfe86828701610d65565b9350506020610e0f86828701610da6565b9250506040610e2086828701610aa7565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e64578082015181840152602081019050610e49565b83811115610e73576000848401525b50505050565b6000601f19601f8301169050919050565b6000610e9582610e2a565b610e9f8185610e35565b9350610eaf818560208601610e46565b610eb881610e79565b840191505092915050565b60006040820190508181036000830152610edd8185610e8a565b9050610eec6020830184610cdd565b9392505050565b610efc816109bf565b82525050565b6000602082019050610f176000830184610ef3565b92915050565b610f2681610a48565b82525050565b6000604082019050610f416000830185610f1d565b610f4e6020830184610cdd565b9392505050565b6000602082019050610f6a6000830184610f1d565b92915050565b600081519050610f7f81610a90565b92915050565b600060208284031215610f9b57610f9a6109b5565b5b6000610fa984828501610f70565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061101f602683610fb2565b915061102a82610fc3565b604082019050919050565b6000602082019050818103600083015261104e81611012565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061108b602083610fb2565b915061109682611055565b602082019050919050565b600060208201905081810360008301526110ba8161107e565b9050919050565b7f53656e646572206e6f7420456e747279506f696e740000000000000000000000600082015250565b60006110f7601583610fb2565b9150611102826110c1565b602082019050919050565b60006020820190508181036000830152611126816110ea565b9050919050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b6000611163600d83610fb2565b915061116e8261112d565b602082019050919050565b6000602082019050818103600083015261119281611156565b9050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126111c5576111c4611199565b5b80840192508235915067ffffffffffffffff8211156111e7576111e661119e565b5b602083019250600182023603831315611203576112026111a3565b5b509250929050565b600080fd5b600080fd5b600080858511156112295761122861120b565b5b8386111561123a57611239611210565b5b6001850283019150848603905094509492505050565b600065ffffffffffff82169050919050565b61126b81611250565b811461127657600080fd5b50565b60008135905061128881611262565b92915050565b600080604083850312156112a5576112a46109b5565b5b60006112b385828601611279565b92505060206112c485828601611279565b915050925092905056fea2646970667358221220ef7137fdd6e05e34117c5f0ef14e83a5c065d1d9eca823e40a0ab991beb9e3e864736f6c634300080c0033";

type TestExpirePaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestExpirePaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestExpirePaymaster__factory extends ContractFactory {
  constructor(...args: TestExpirePaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestExpirePaymaster> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestExpirePaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): TestExpirePaymaster {
    return super.attach(address) as TestExpirePaymaster;
  }
  override connect(signer: Signer): TestExpirePaymaster__factory {
    return super.connect(signer) as TestExpirePaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestExpirePaymasterInterface {
    return new utils.Interface(_abi) as TestExpirePaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestExpirePaymaster {
    return new Contract(address, _abi, signerOrProvider) as TestExpirePaymaster;
  }
}
