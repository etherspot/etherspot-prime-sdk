/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestWarmColdAccount,
  TestWarmColdAccountInterface,
} from "../../../../src/aa-4337/test/TestWarmColdAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
    ],
    name: "touchPaymaster",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "touchStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600180556040516109f93803806109f98339818101604052810190610029919061011b565b61004367ce557241c3208ac160c01b6100a360201b60201c565b61005d6774a7987d0d18e4f460c01b6100a360201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610148565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d6826100ab565b9050919050565b60006100e8826100cb565b9050919050565b6100f8816100dd565b811461010357600080fd5b50565b600081519050610115816100ef565b92915050565b600060208284031215610131576101306100a6565b5b600061013f84828501610106565b91505092915050565b6108a2806101576000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633a871cdd14610051578063c19d93fb14610081578063f115d40d1461009f578063fb0c2425146100cf575b600080fd5b61006b60048036038101906100669190610582565b6100ed565b6040516100789190610600565b60405180910390f35b61008961043b565b6040516100969190610600565b60405180910390f35b6100b960048036038101906100b49190610679565b610441565b6040516100c69190610600565b60405180910390f35b6100d761049e565b6040516100e49190610600565b60405180910390f35b600061010367b0420e44730e746960c01b6104e4565b61011767e73a68d90a85013960c01b6104e4565b61012b673423b2d1572f9ff460c01b6104e4565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf983306040518363ffffffff1660e01b815260040161018591906106b5565b6000604051808303818588803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b50505050506101cb676c5f1ec3388eb1cb60c01b6104e4565b6101df675397fc8c85ae939e60c01b6104e4565b60018460200135036102a0576101ff6774b9898c75e981ec60c01b6104e4565b61021367d86d9079dd16a37460c01b6104e4565b61022767355a44fc04ff2fa960c01b6104e4565b3073ffffffffffffffffffffffffffffffffffffffff1663fb0c24256103e86040518263ffffffff1660e01b81526004016020604051808303818786fa158015610275573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061029a91906106e5565b50610408565b6102b467a8beaa35bc23262660c01b6104e4565b6102c867cc5da71535a47c4e60c01b6104e4565b60028460200135036103f2576102e867233dd40ebe1141b760c01b6104e4565b6102fc671fde1a9c877c30c460c01b6104e4565b610310671a002510c5bb922260c01b6104e4565b6000848061012001906103239190610721565b6000906014926103359392919061078e565b90610340919061080d565b60601c9050610359674c9603e4925f0b6e60c01b6104e4565b61036d67596a6faa76e2824560c01b6104e4565b3073ffffffffffffffffffffffffffffffffffffffff1663f115d40d6103e8836040518363ffffffff1660e01b81526004016103a991906106b5565b6020604051808303818786fa1580156103c6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103eb91906106e5565b5050610407565b6104066723d1719263ba0f1a60c01b6104e4565b5b5b61041c6753925c7a960a950160c01b6104e4565b610430672938f9096db271c760c01b6104e4565b600090509392505050565b60015481565b600061045767e77cef1f0f256a7e60c01b6104e4565b61046b672fba17190bb50f1960c01b6104e4565b61047f67bbb186524d5f521260c01b6104e4565b8173ffffffffffffffffffffffffffffffffffffffff163b9050919050565b60006104b467e1a72f8544728a5160c01b6104e4565b6104c86719a9c454343815a560c01b6104e4565b6104dc6796322ea35c87008760c01b6104e4565b600154905090565b50565b600080fd5b600080fd5b600080fd5b6000610160828403121561050d5761050c6104f1565b5b81905092915050565b6000819050919050565b61052981610516565b811461053457600080fd5b50565b60008135905061054681610520565b92915050565b6000819050919050565b61055f8161054c565b811461056a57600080fd5b50565b60008135905061057c81610556565b92915050565b60008060006060848603121561059b5761059a6104e7565b5b600084013567ffffffffffffffff8111156105b9576105b86104ec565b5b6105c5868287016104f6565b93505060206105d686828701610537565b92505060406105e78682870161056d565b9150509250925092565b6105fa8161054c565b82525050565b600060208201905061061560008301846105f1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106468261061b565b9050919050565b6106568161063b565b811461066157600080fd5b50565b6000813590506106738161064d565b92915050565b60006020828403121561068f5761068e6104e7565b5b600061069d84828501610664565b91505092915050565b6106af8161063b565b82525050565b60006020820190506106ca60008301846106a6565b92915050565b6000815190506106df81610556565b92915050565b6000602082840312156106fb576106fa6104e7565b5b6000610709848285016106d0565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261073e5761073d610712565b5b80840192508235915067ffffffffffffffff8211156107605761075f610717565b5b60208301925060018202360383131561077c5761077b61071c565b5b509250929050565b600080fd5b600080fd5b600080858511156107a2576107a1610784565b5b838611156107b3576107b2610789565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b600082821b905092915050565b600061081983836107c9565b8261082481356107d4565b925060148210156108645761085f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000083601403600802610800565b831692505b50509291505056fea26469706673582212203cd7646de378cc8383ba88de526f90016327cecfdf3b82f0840e0403a73978fb64736f6c63430008110033";

type TestWarmColdAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWarmColdAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWarmColdAccount__factory extends ContractFactory {
  constructor(...args: TestWarmColdAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<TestWarmColdAccount> {
    return super.deploy(_ep, overrides || {}) as Promise<TestWarmColdAccount>;
  }
  override getDeployTransaction(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override attach(address: string): TestWarmColdAccount {
    return super.attach(address) as TestWarmColdAccount;
  }
  override connect(signer: Signer): TestWarmColdAccount__factory {
    return super.connect(signer) as TestWarmColdAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWarmColdAccountInterface {
    return new utils.Interface(_abi) as TestWarmColdAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWarmColdAccount {
    return new Contract(address, _abi, signerOrProvider) as TestWarmColdAccount;
  }
}
