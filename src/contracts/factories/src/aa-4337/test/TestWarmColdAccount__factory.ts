/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestWarmColdAccount,
  TestWarmColdAccountInterface,
} from "../../../../src/aa-4337/test/TestWarmColdAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
    ],
    name: "touchPaymaster",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "touchStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600180556040516107dd3803806107dd833981810160405281019061002991906100e4565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610111565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009f82610074565b9050919050565b60006100b182610094565b9050919050565b6100c1816100a6565b81146100cc57600080fd5b50565b6000815190506100de816100b8565b92915050565b6000602082840312156100fa576100f961006f565b5b6000610108848285016100cf565b91505092915050565b6106bd806101206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633a871cdd14610051578063c19d93fb14610081578063f115d40d1461009f578063fb0c2425146100cf575b600080fd5b61006b6004803603810190610066919061039d565b6100ed565b604051610078919061041b565b60405180910390f35b6100896102d1565b604051610096919061041b565b60405180910390f35b6100b960048036038101906100b49190610494565b6102d7565b6040516100c6919061041b565b60405180910390f35b6100d76102f8565b6040516100e4919061041b565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf983306040518363ffffffff1660e01b815260040161014a91906104d0565b6000604051808303818588803b15801561016357600080fd5b505af1158015610177573d6000803e3d6000fd5b5050505050600184602001351415610202573073ffffffffffffffffffffffffffffffffffffffff1663fb0c24256103e86040518263ffffffff1660e01b81526004016020604051808303818786fa1580156101d7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906101fc9190610500565b506102c6565b6002846020013514156102c557600084806101200190610222919061053c565b600090601492610234939291906105a9565b9061023f9190610628565b60601c90503073ffffffffffffffffffffffffffffffffffffffff1663f115d40d6103e8836040518363ffffffff1660e01b815260040161028091906104d0565b6020604051808303818786fa15801561029d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102c29190610500565b50505b5b600090509392505050565b60015481565b60008173ffffffffffffffffffffffffffffffffffffffff163b9050919050565b6000600154905090565b600080fd5b600080fd5b600080fd5b600061016082840312156103285761032761030c565b5b81905092915050565b6000819050919050565b61034481610331565b811461034f57600080fd5b50565b6000813590506103618161033b565b92915050565b6000819050919050565b61037a81610367565b811461038557600080fd5b50565b60008135905061039781610371565b92915050565b6000806000606084860312156103b6576103b5610302565b5b600084013567ffffffffffffffff8111156103d4576103d3610307565b5b6103e086828701610311565b93505060206103f186828701610352565b925050604061040286828701610388565b9150509250925092565b61041581610367565b82525050565b6000602082019050610430600083018461040c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061046182610436565b9050919050565b61047181610456565b811461047c57600080fd5b50565b60008135905061048e81610468565b92915050565b6000602082840312156104aa576104a9610302565b5b60006104b88482850161047f565b91505092915050565b6104ca81610456565b82525050565b60006020820190506104e560008301846104c1565b92915050565b6000815190506104fa81610371565b92915050565b60006020828403121561051657610515610302565b5b6000610524848285016104eb565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126105595761055861052d565b5b80840192508235915067ffffffffffffffff82111561057b5761057a610532565b5b60208301925060018202360383131561059757610596610537565b5b509250929050565b600080fd5b600080fd5b600080858511156105bd576105bc61059f565b5b838611156105ce576105cd6105a4565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b600082821b905092915050565b600061063483836105e4565b8261063f81356105ef565b9250601482101561067f5761067a7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008360140360080261061b565b831692505b50509291505056fea2646970667358221220bc7d07bd269580351529e0674f1a7f6311a0e5dfeaab02f50e2b5004d3ee754164736f6c634300080c0033";

type TestWarmColdAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWarmColdAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWarmColdAccount__factory extends ContractFactory {
  constructor(...args: TestWarmColdAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<TestWarmColdAccount> {
    return super.deploy(_ep, overrides || {}) as Promise<TestWarmColdAccount>;
  }
  override getDeployTransaction(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override attach(address: string): TestWarmColdAccount {
    return super.attach(address) as TestWarmColdAccount;
  }
  override connect(signer: Signer): TestWarmColdAccount__factory {
    return super.connect(signer) as TestWarmColdAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWarmColdAccountInterface {
    return new utils.Interface(_abi) as TestWarmColdAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWarmColdAccount {
    return new Contract(address, _abi, signerOrProvider) as TestWarmColdAccount;
  }
}
