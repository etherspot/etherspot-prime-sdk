/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestHelpers,
  TestHelpersInterface,
} from "../../../../src/aa-4337/test/TestHelpers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "paymasterValidationData",
        type: "uint256",
      },
    ],
    name: "intersectTimeRange",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "sigFailed",
        type: "bool",
      },
      {
        internalType: "uint48",
        name: "validUntil",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "validAfter",
        type: "uint48",
      },
    ],
    name: "packValidationData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "packValidationDataStruct",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    name: "parseValidationData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107a2806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806324d3cde6146100515780634fe5f5cf14610081578063a4b2282e146100b1578063b059e2fa146100e1575b600080fd5b61006b6004803603810190610066919061056c565b610111565b60405161007891906105b2565b60405180910390f35b61009b600480360381019061009691906105f9565b610123565b6040516100a89190610699565b60405180910390f35b6100cb60048036038101906100c691906106b4565b61013d565b6040516100d89190610699565b60405180910390f35b6100fb60048036038101906100f69190610719565b610155565b60405161010891906105b2565b60405180910390f35b600061011c8261016b565b9050919050565b61012b610385565b61013583836101b3565b905092915050565b610145610385565b61014e826102c7565b9050919050565b600061016284848461034c565b90509392505050565b600060d0826020015165ffffffffffff16901b60a0836040015165ffffffffffff16901b836000015173ffffffffffffffffffffffffffffffffffffffff1617179050919050565b6101bb610385565b60006101c6846102c7565b905060006101d3846102c7565b9050600082600001519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561021b57816000015190505b6000836020015190506000846040015190506000846020015190506000856040015190508165ffffffffffff168465ffffffffffff16101561025b578193505b8065ffffffffffff168365ffffffffffff161115610277578092505b60405180606001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018565ffffffffffff1681526020018465ffffffffffff1681525097505050505050505092915050565b6102cf610385565b6000829050600060a084901c905060008165ffffffffffff1614156102f85765ffffffffffff90505b600060d085901c905060405180606001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018265ffffffffffff1681526020018365ffffffffffff168152509350505050919050565b600060d08265ffffffffffff16901b60a08465ffffffffffff16901b85610374576000610377565b60015b60ff16171790509392505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610429826103e0565b810181811067ffffffffffffffff82111715610448576104476103f1565b5b80604052505050565b600061045b6103cc565b90506104678282610420565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104978261046c565b9050919050565b6104a78161048c565b81146104b257600080fd5b50565b6000813590506104c48161049e565b92915050565b600065ffffffffffff82169050919050565b6104e5816104ca565b81146104f057600080fd5b50565b600081359050610502816104dc565b92915050565b60006060828403121561051e5761051d6103db565b5b6105286060610451565b90506000610538848285016104b5565b600083015250602061054c848285016104f3565b6020830152506040610560848285016104f3565b60408301525092915050565b600060608284031215610582576105816103d6565b5b600061059084828501610508565b91505092915050565b6000819050919050565b6105ac81610599565b82525050565b60006020820190506105c760008301846105a3565b92915050565b6105d681610599565b81146105e157600080fd5b50565b6000813590506105f3816105cd565b92915050565b600080604083850312156106105761060f6103d6565b5b600061061e858286016105e4565b925050602061062f858286016105e4565b9150509250929050565b6106428161048c565b82525050565b610651816104ca565b82525050565b60608201600082015161066d6000850182610639565b5060208201516106806020850182610648565b5060408201516106936040850182610648565b50505050565b60006060820190506106ae6000830184610657565b92915050565b6000602082840312156106ca576106c96103d6565b5b60006106d8848285016105e4565b91505092915050565b60008115159050919050565b6106f6816106e1565b811461070157600080fd5b50565b600081359050610713816106ed565b92915050565b600080600060608486031215610732576107316103d6565b5b600061074086828701610704565b9350506020610751868287016104f3565b9250506040610762868287016104f3565b915050925092509256fea264697066735822122033ee991e40819abe9debf08398c6d0b858ff4f753ab67255e7f397abd7072bfa64736f6c634300080c0033";

type TestHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHelpers__factory extends ContractFactory {
  constructor(...args: TestHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestHelpers> {
    return super.deploy(overrides || {}) as Promise<TestHelpers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestHelpers {
    return super.attach(address) as TestHelpers;
  }
  override connect(signer: Signer): TestHelpers__factory {
    return super.connect(signer) as TestHelpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHelpersInterface {
    return new utils.Interface(_abi) as TestHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHelpers {
    return new Contract(address, _abi, signerOrProvider) as TestHelpers;
  }
}
