/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestHelpers,
  TestHelpersInterface,
} from "../../../../src/aa-4337/test/TestHelpers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "paymasterValidationData",
        type: "uint256",
      },
    ],
    name: "intersectTimeRange",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "sigFailed",
        type: "bool",
      },
      {
        internalType: "uint48",
        name: "validUntil",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "validAfter",
        type: "uint48",
      },
    ],
    name: "packValidationData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "packValidationDataStruct",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    name: "parseValidationData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "aggregator",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "validAfter",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "validUntil",
            type: "uint48",
          },
        ],
        internalType: "struct ValidationData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cdb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806324d3cde6146100515780634fe5f5cf14610081578063a4b2282e146100b1578063b059e2fa146100e1575b600080fd5b61006b60048036038101906100669190610aa5565b610111565b6040516100789190610aeb565b60405180910390f35b61009b60048036038101906100969190610b32565b61015f565b6040516100a89190610bd2565b60405180910390f35b6100cb60048036038101906100c69190610bed565b6101b5565b6040516100d89190610bd2565b60405180910390f35b6100fb60048036038101906100f69190610c52565b610209565b6040516101089190610aeb565b60405180910390f35b600061012767cae266292b58cddb60c01b61025b565b61013b6760134991dff8120d60c01b61025b565b61014f6743fb9b02296c824d60c01b61025b565b6101588261025e565b9050919050565b6101676108be565b61017b67e7dd0eacf23b854560c01b61025b565b61018f6706e30060de349dd260c01b61025b565b6101a367b82355ada54da35e60c01b61025b565b6101ad83836102e2565b905092915050565b6101bd6108be565b6101d1670c778a37fb6091c260c01b61025b565b6101e5671606f6ef4505580f60c01b61025b565b6101f967633bf8864702a39460c01b61025b565b6102028261065c565b9050919050565b600061021f678da6f0bf1d7f377f60c01b61025b565b61023367f35225933ea1682060c01b61025b565b610247677bdacee441ea9b7060c01b61025b565b6102528484846107fd565b90509392505050565b50565b60006102746717718d3268584e5860c01b6108a9565b6102886719e6416798285bdf60c01b6108a9565b61029c67a626d76b40db563f60c01b6108a9565b60d0826020015165ffffffffffff16901b60a0836040015165ffffffffffff16901b836000015173ffffffffffffffffffffffffffffffffffffffff1617179050919050565b6102ea6108be565b6102fe67e69f7455fa7a07b360c01b6108a9565b61031267b4cd7af03ea2c5fa60c01b6108a9565b61032667ada53efb1dfccb7760c01b6108a9565b60006103318461065c565b9050610347674d0f716f7bcb7b9260c01b6108a9565b61035b67d63d53a2153b304860c01b6108a9565b60006103668461065c565b905061037c6722fc217c8bb3a21260c01b6108a9565b61039067d43a06a00665043560c01b6108a9565b6000826000015190506103ad67151bc2b1c770894460c01b6108a9565b6103c16732841106c226c6e260c01b6108a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361042957610409671aace643f445af3c60c01b6108a9565b61041d67b767f16e441c791560c01b6108a9565b8160000151905061043e565b61043d6721f72ae527759e0160c01b6108a9565b5b61045267976cb73ee93faf4060c01b6108a9565b61046667fbc1cf9b45ac9e0560c01b6108a9565b600083602001519050610483675ae02cf73427453160c01b6108a9565b610497672f3e3d635ca3dee260c01b6108a9565b6000846040015190506104b467d85c8bdd30a53c2060c01b6108a9565b6104c867479ce7ff317d61d960c01b6108a9565b6000846020015190506104e56748cd0366f66a74d660c01b6108a9565b6104f967233a1ba95415d76360c01b6108a9565b60008560400151905061051667f891c3f91e3987cf60c01b6108a9565b61052a67ee2ac2151246907660c01b6108a9565b8165ffffffffffff168465ffffffffffff16101561055e57610556677765bdded08f417460c01b6108a9565b819350610573565b610572673db76e2382591bc460c01b6108a9565b5b61058767bbd9ea227d2e8b6160c01b6108a9565b61059b67269600f4d05d62c160c01b6108a9565b8065ffffffffffff168365ffffffffffff1611156105cf576105c767769c64441515ae4760c01b6108a9565b8092506105e4565b6105e36792508f8b38fce31860c01b6108a9565b5b6105f867c4465d6321fbb3e560c01b6108a9565b61060c67d764ee64c31d59fd60c01b6108a9565b60405180606001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018565ffffffffffff1681526020018465ffffffffffff1681525097505050505050505092915050565b6106646108be565b61067867445255dfc48f0c1160c01b6108a9565b61068c67910e9ceb2fd1ddda60c01b6108a9565b6106a0678110ad95ab238bef60c01b6108a9565b60008290506106b967c37597af64d819b260c01b6108a9565b6106cd67745df2de1e3ff8c060c01b6108a9565b600060a084901c90506106ea675f3ae0fbd8e35c5660c01b6108a9565b6106fe679197384898b1248760c01b6108a9565b60008165ffffffffffff160361074457610722676ec2d105430e80aa60c01b6108a9565b610736673b4825f59f411ff360c01b6108a9565b65ffffffffffff9050610759565b61075867d11e3810d26f91af60c01b6108a9565b5b61076d67b9e858fecf1822cf60c01b6108a9565b61078167d84bfe2ecd699a3c60c01b6108a9565b600060d085901c905061079e67bf26ab64782cc21560c01b6108a9565b6107b26716b05318dd950b3260c01b6108a9565b60405180606001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018265ffffffffffff1681526020018365ffffffffffff168152509350505050919050565b600061081367f46661bb4e8bad1e60c01b6108a9565b61082767ad115cf58922913f60c01b6108a9565b61083b67e939de70e4ee463c60c01b6108a9565b60d08265ffffffffffff16901b60a08465ffffffffffff16901b8580156108725750610871675d24490627414a1d60c01b6108ac565b5b8061088d575061088c6748f460bd74afa2fc60c01b6108b7565b5b61089857600061089b565b60015b60ff16171790509392505050565b50565b600060019050919050565b6000919050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61096282610919565b810181811067ffffffffffffffff821117156109815761098061092a565b5b80604052505050565b6000610994610905565b90506109a08282610959565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109d0826109a5565b9050919050565b6109e0816109c5565b81146109eb57600080fd5b50565b6000813590506109fd816109d7565b92915050565b600065ffffffffffff82169050919050565b610a1e81610a03565b8114610a2957600080fd5b50565b600081359050610a3b81610a15565b92915050565b600060608284031215610a5757610a56610914565b5b610a61606061098a565b90506000610a71848285016109ee565b6000830152506020610a8584828501610a2c565b6020830152506040610a9984828501610a2c565b60408301525092915050565b600060608284031215610abb57610aba61090f565b5b6000610ac984828501610a41565b91505092915050565b6000819050919050565b610ae581610ad2565b82525050565b6000602082019050610b006000830184610adc565b92915050565b610b0f81610ad2565b8114610b1a57600080fd5b50565b600081359050610b2c81610b06565b92915050565b60008060408385031215610b4957610b4861090f565b5b6000610b5785828601610b1d565b9250506020610b6885828601610b1d565b9150509250929050565b610b7b816109c5565b82525050565b610b8a81610a03565b82525050565b606082016000820151610ba66000850182610b72565b506020820151610bb96020850182610b81565b506040820151610bcc6040850182610b81565b50505050565b6000606082019050610be76000830184610b90565b92915050565b600060208284031215610c0357610c0261090f565b5b6000610c1184828501610b1d565b91505092915050565b60008115159050919050565b610c2f81610c1a565b8114610c3a57600080fd5b50565b600081359050610c4c81610c26565b92915050565b600080600060608486031215610c6b57610c6a61090f565b5b6000610c7986828701610c3d565b9350506020610c8a86828701610a2c565b9250506040610c9b86828701610a2c565b915050925092509256fea26469706673582212205f9db45ca01034b5997cec04470e3ba477bb9afbc44deb8366959476b7fe04f764736f6c63430008110033";

type TestHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHelpers__factory extends ContractFactory {
  constructor(...args: TestHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestHelpers> {
    return super.deploy(overrides || {}) as Promise<TestHelpers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestHelpers {
    return super.attach(address) as TestHelpers;
  }
  override connect(signer: Signer): TestHelpers__factory {
    return super.connect(signer) as TestHelpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHelpersInterface {
    return new utils.Interface(_abi) as TestHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestHelpers {
    return new Contract(address, _abi, signerOrProvider) as TestHelpers;
  }
}
