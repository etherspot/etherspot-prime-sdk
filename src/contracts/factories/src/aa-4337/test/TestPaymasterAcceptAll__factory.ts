/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestPaymasterAcceptAll,
  TestPaymasterAcceptAllInterface,
} from "../../../../src/aa-4337/test/TestPaymasterAcceptAll";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b506040516200141038038062001410833981810160405281019062000037919062000224565b80620000586200004c620000da60201b60201c565b620000e260201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050503373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614620000d357620000d232620000e260201b60201c565b5b5062000256565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d882620001ab565b9050919050565b6000620001ec82620001cb565b9050919050565b620001fe81620001df565b81146200020a57600080fd5b50565b6000815190506200021e81620001f3565b92915050565b6000602082840312156200023d576200023c620001a6565b5b60006200024d848285016200020d565b91505092915050565b60805161116d620002a36000396000818161026d01528181610304015281816103ec01528181610418015281816104a201528181610532015281816105d10152610848015261116d6000f3fe6080604052600436106100a75760003560e01c8063bb9fe6bf11610064578063bb9fe6bf14610187578063c23a5cea1461019e578063c399ec88146101c7578063d0e30db0146101f2578063f2fde38b146101fc578063f465c77e14610225576100a7565b80630396cb60146100ac578063205c2878146100c8578063715018a6146100f15780638da5cb5b14610108578063a9a2340914610133578063b0d691fe1461015c575b600080fd5b6100c660048036038101906100c19190610999565b610263565b005b3480156100d457600080fd5b506100ef60048036038101906100ea9190610a5a565b6102fa565b005b3480156100fd57600080fd5b50610106610393565b005b34801561011457600080fd5b5061011d6103a7565b60405161012a9190610abb565b60405180910390f35b34801561013f57600080fd5b5061015a60048036038101906101559190610b60565b6103d0565b005b34801561016857600080fd5b506101716103ea565b60405161017e9190610c33565b60405180910390f35b34801561019357600080fd5b5061019c61040e565b005b3480156101aa57600080fd5b506101c560048036038101906101c09190610c4e565b610498565b005b3480156101d357600080fd5b506101dc61052e565b6040516101e99190610c8a565b60405180910390f35b6101fa6105cf565b005b34801561020857600080fd5b50610223600480360381019061021e9190610cd1565b61065d565b005b34801561023157600080fd5b5061024c60048036038101906102479190610d59565b6106e1565b60405161025a929190610e61565b60405180910390f35b61026b610704565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b81526004016102c59190610ea0565b6000604051808303818588803b1580156102de57600080fd5b505af11580156102f2573d6000803e3d6000fd5b505050505050565b610302610704565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b815260040161035d929190610eca565b600060405180830381600087803b15801561037757600080fd5b505af115801561038b573d6000803e3d6000fd5b505050505050565b61039b610704565b6103a56000610782565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103d8610846565b6103e4848484846108d6565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610416610704565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561047e57600080fd5b505af1158015610492573d6000803e3d6000fd5b50505050565b6104a0610704565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b81526004016104f99190610ef3565b600060405180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105899190610abb565b602060405180830381865afa1580156105a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ca9190610f23565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b81526004016106299190610abb565b6000604051808303818588803b15801561064257600080fd5b505af1158015610656573d6000803e3d6000fd5b5050505050565b610665610704565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cc90610fd3565b60405180910390fd5b6106de81610782565b50565b606060006106ed610846565b6106f8858585610911565b91509150935093915050565b61070c61094b565b73ffffffffffffffffffffffffffffffffffffffff1661072a6103a7565b73ffffffffffffffffffffffffffffffffffffffff1614610780576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107779061103f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb906110ab565b60405180910390fd5b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090890611117565b60405180910390fd5b606060006130398314610925576000610928565b60015b60405180602001604052806000815250908060ff16905091509150935093915050565b600033905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b6109768161095d565b811461098157600080fd5b50565b6000813590506109938161096d565b92915050565b6000602082840312156109af576109ae610953565b5b60006109bd84828501610984565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109f1826109c6565b9050919050565b610a01816109e6565b8114610a0c57600080fd5b50565b600081359050610a1e816109f8565b92915050565b6000819050919050565b610a3781610a24565b8114610a4257600080fd5b50565b600081359050610a5481610a2e565b92915050565b60008060408385031215610a7157610a70610953565b5b6000610a7f85828601610a0f565b9250506020610a9085828601610a45565b9150509250929050565b6000610aa5826109c6565b9050919050565b610ab581610a9a565b82525050565b6000602082019050610ad06000830184610aac565b92915050565b60038110610ae357600080fd5b50565b600081359050610af581610ad6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610b2057610b1f610afb565b5b8235905067ffffffffffffffff811115610b3d57610b3c610b00565b5b602083019150836001820283011115610b5957610b58610b05565b5b9250929050565b60008060008060608587031215610b7a57610b79610953565b5b6000610b8887828801610ae6565b945050602085013567ffffffffffffffff811115610ba957610ba8610958565b5b610bb587828801610b0a565b93509350506040610bc887828801610a45565b91505092959194509250565b6000819050919050565b6000610bf9610bf4610bef846109c6565b610bd4565b6109c6565b9050919050565b6000610c0b82610bde565b9050919050565b6000610c1d82610c00565b9050919050565b610c2d81610c12565b82525050565b6000602082019050610c486000830184610c24565b92915050565b600060208284031215610c6457610c63610953565b5b6000610c7284828501610a0f565b91505092915050565b610c8481610a24565b82525050565b6000602082019050610c9f6000830184610c7b565b92915050565b610cae81610a9a565b8114610cb957600080fd5b50565b600081359050610ccb81610ca5565b92915050565b600060208284031215610ce757610ce6610953565b5b6000610cf584828501610cbc565b91505092915050565b600080fd5b60006101608284031215610d1a57610d19610cfe565b5b81905092915050565b6000819050919050565b610d3681610d23565b8114610d4157600080fd5b50565b600081359050610d5381610d2d565b92915050565b600080600060608486031215610d7257610d71610953565b5b600084013567ffffffffffffffff811115610d9057610d8f610958565b5b610d9c86828701610d03565b9350506020610dad86828701610d44565b9250506040610dbe86828701610a45565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e02578082015181840152602081019050610de7565b83811115610e11576000848401525b50505050565b6000601f19601f8301169050919050565b6000610e3382610dc8565b610e3d8185610dd3565b9350610e4d818560208601610de4565b610e5681610e17565b840191505092915050565b60006040820190508181036000830152610e7b8185610e28565b9050610e8a6020830184610c7b565b9392505050565b610e9a8161095d565b82525050565b6000602082019050610eb56000830184610e91565b92915050565b610ec4816109e6565b82525050565b6000604082019050610edf6000830185610ebb565b610eec6020830184610c7b565b9392505050565b6000602082019050610f086000830184610ebb565b92915050565b600081519050610f1d81610a2e565b92915050565b600060208284031215610f3957610f38610953565b5b6000610f4784828501610f0e565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610fbd602683610f50565b9150610fc882610f61565b604082019050919050565b60006020820190508181036000830152610fec81610fb0565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611029602083610f50565b915061103482610ff3565b602082019050919050565b600060208201905081810360008301526110588161101c565b9050919050565b7f53656e646572206e6f7420456e747279506f696e740000000000000000000000600082015250565b6000611095601583610f50565b91506110a08261105f565b602082019050919050565b600060208201905081810360008301526110c481611088565b9050919050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b6000611101600d83610f50565b915061110c826110cb565b602082019050919050565b60006020820190508181036000830152611130816110f4565b905091905056fea26469706673582212206eafc8801f94bbc1af740176963ae5093ccdcb813cd32f7eacc80e8dc845bd2264736f6c634300080c0033";

type TestPaymasterAcceptAllConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPaymasterAcceptAllConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPaymasterAcceptAll__factory extends ContractFactory {
  constructor(...args: TestPaymasterAcceptAllConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestPaymasterAcceptAll> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestPaymasterAcceptAll>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): TestPaymasterAcceptAll {
    return super.attach(address) as TestPaymasterAcceptAll;
  }
  override connect(signer: Signer): TestPaymasterAcceptAll__factory {
    return super.connect(signer) as TestPaymasterAcceptAll__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPaymasterAcceptAllInterface {
    return new utils.Interface(_abi) as TestPaymasterAcceptAllInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPaymasterAcceptAll {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestPaymasterAcceptAll;
  }
}
