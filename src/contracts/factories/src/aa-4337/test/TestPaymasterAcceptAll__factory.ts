/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestPaymasterAcceptAll,
  TestPaymasterAcceptAllInterface,
} from "../../../../src/aa-4337/test/TestPaymasterAcceptAll";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620019313803806200193183398181016040528101906200003791906200032c565b80620000586200004c620001dc60201b60201c565b620001e460201b60201c565b6200007467aabb336c9ce83de860c01b620002a860201b60201c565b62000090672d07becd259a4ef060c01b620002a860201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620000e167a24a1fbd4460121260c01b620002ab60201b60201c565b620000fd671cdb9e5986247d6c60c01b620002ab60201b60201c565b62000119674c45b8e25fc9156560c01b620002ab60201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614620001b85762000169677ef8045f9f4ada0360c01b620002ab60201b60201c565b62000185671a90269c12c8ba2260c01b620002ab60201b60201c565b620001a16706fe28dc5e467d5e60c01b620002ab60201b60201c565b620001b232620001e460201b60201c565b620001d5565b620001d467cb1ff296503353f360c01b620002ab60201b60201c565b5b506200035e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002e082620002b3565b9050919050565b6000620002f482620002d3565b9050919050565b6200030681620002e7565b81146200031257600080fd5b50565b6000815190506200032681620002fb565b92915050565b600060208284031215620003455762000344620002ae565b5b6000620003558482850162000315565b91505092915050565b608051611586620003ab600039600081816102d1015281816103cc01528181610518015281816105a801528181610696015281816107620152818161083d0152610b6a01526115866000f3fe6080604052600436106100a75760003560e01c8063bb9fe6bf11610064578063bb9fe6bf14610187578063c23a5cea1461019e578063c399ec88146101c7578063d0e30db0146101f2578063f2fde38b146101fc578063f465c77e14610225576100a7565b80630396cb60146100ac578063205c2878146100c8578063715018a6146100f15780638da5cb5b14610108578063a9a2340914610133578063b0d691fe1461015c575b600080fd5b6100c660048036038101906100c19190610dbb565b610263565b005b3480156100d457600080fd5b506100ef60048036038101906100ea9190610e7c565b61035e565b005b3480156100fd57600080fd5b5061010661045b565b005b34801561011457600080fd5b5061011d61046f565b60405161012a9190610edd565b60405180910390f35b34801561013f57600080fd5b5061015a60048036038101906101559190610f82565b610498565b005b34801561016857600080fd5b50610171610516565b60405161017e9190611055565b60405180910390f35b34801561019357600080fd5b5061019c61053a565b005b3480156101aa57600080fd5b506101c560048036038101906101c09190611070565b610628565b005b3480156101d357600080fd5b506101dc610722565b6040516101e991906110ac565b60405180910390f35b6101fa6107ff565b005b34801561020857600080fd5b50610223600480360381019061021e91906110f3565b6108c9565b005b34801561023157600080fd5b5061024c6004803603810190610247919061117b565b61094c565b60405161025a92919061127a565b60405180910390f35b61027767b8237d27482ab06b60c01b6109d3565b61027f6109d6565b61029367e2f107173549500460c01b6109d3565b6102a76701033209d47e5b2460c01b6109d3565b6102bb67dcd4652c61f0b32d60c01b6109d3565b6102cf67eae392c3eb511cc760c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b815260040161032991906112b9565b6000604051808303818588803b15801561034257600080fd5b505af1158015610356573d6000803e3d6000fd5b505050505050565b610372672907e6d97c3d1da360c01b6109d3565b61037a6109d6565b61038e678ac019c63563710260c01b6109d3565b6103a267da1f1c840719888260c01b6109d3565b6103b667bc135ce98e9f326f60c01b6109d3565b6103ca67532d977f60999f3e60c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b81526004016104259291906112e3565b600060405180830381600087803b15801561043f57600080fd5b505af1158015610453573d6000803e3d6000fd5b505050505050565b6104636109d6565b61046d6000610a54565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104ac672cf57c41b8b89fcb60c01b6109d3565b6104c06799497fbe705cd9f760c01b6109d3565b6104d4679b4512fe9e58bae960c01b6109d3565b6104dc610b18565b6104f06793ce2f3709fe770560c01b6109d3565b6105046790067c65a6f5d3a860c01b6109d3565b61051084848484610c0c565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61054e67ec8a9719e7b677d060c01b6109d3565b6105566109d6565b61056a67672cc496b6067cea60c01b6109d3565b61057e674fdbd001b77629ae60c01b6109d3565b610592677362eae3491c0ae160c01b6109d3565b6105a66797f9e99fb1d4b33860c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b50505050565b61063c67c9ef1b986fb51fe860c01b6109d3565b6106446109d6565b61065867de53cad8928d67f560c01b6109d3565b61066c677af1d989d252676f60c01b6109d3565b610680676fd423196847dbb160c01b6109d3565b61069467097023434434ee0460c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b81526004016106ed919061130c565b600060405180830381600087803b15801561070757600080fd5b505af115801561071b573d6000803e3d6000fd5b5050505050565b600061073867f6be01970597753160c01b6109d3565b61074c673f87ae81816372b460c01b6109d3565b61076067bd328ab4ce68c2fb60c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107b99190610edd565b602060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa919061133c565b905090565b610813673943ebd1bec8d2d660c01b6109d3565b6108276702fc4196924a47ac60c01b6109d3565b61083b675d10604969f00bcf60c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b81526004016108959190610edd565b6000604051808303818588803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b5050505050565b6108d16109d6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610940576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610937906113ec565b60405180910390fd5b61094981610a54565b50565b606060006109646791cf27427781cd8860c01b6109d3565b610978676434b0ee41880ab260c01b6109d3565b61098c67f2c91afe86e9062d60c01b6109d3565b610994610b18565b6109a86723ccedb6dfbcc30860c01b6109d3565b6109bc67287492035946b96c60c01b6109d3565b6109c7858585610c97565b91509150935093915050565b50565b6109de610d58565b73ffffffffffffffffffffffffffffffffffffffff166109fc61046f565b73ffffffffffffffffffffffffffffffffffffffff1614610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4990611458565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610b2c6793fe0ed3ca04f82b60c01b6109d3565b610b40678abd782107e62dce60c01b6109d3565b610b5467b9c2ce2852bf0cf360c01b6109d3565b610b6867f8314810c2ffd6e460c01b6109d3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed906114c4565b60405180910390fd5b610c0a677eb1fed1a5060b5e60c01b6109d3565b565b610c2067fadd006a881f054660c01b6109d3565b610c3467d9873e623a945ead60c01b6109d3565b610c4867b1300829c5ca164560c01b6109d3565b610c5c67b80ccfd3afb0094c60c01b6109d3565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8e90611530565b60405180910390fd5b60606000610caf6762f9c366a31858ba60c01b610d60565b610cc367bd378096f110ce5c60c01b610d60565b610cd7679e37ab49dcd436c660c01b610d60565b610ceb67bc4b909bf563a64060c01b610d60565b61303983148015610d0c5750610d0b678d644220341def6460c01b610d63565b5b80610d275750610d26677188393ea8a476ba60c01b610d6e565b5b610d32576000610d35565b60015b60405180602001604052806000815250908060ff16905091509150935093915050565b600033905090565b50565b600060019050919050565b6000919050565b600080fd5b600080fd5b600063ffffffff82169050919050565b610d9881610d7f565b8114610da357600080fd5b50565b600081359050610db581610d8f565b92915050565b600060208284031215610dd157610dd0610d75565b5b6000610ddf84828501610da6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1382610de8565b9050919050565b610e2381610e08565b8114610e2e57600080fd5b50565b600081359050610e4081610e1a565b92915050565b6000819050919050565b610e5981610e46565b8114610e6457600080fd5b50565b600081359050610e7681610e50565b92915050565b60008060408385031215610e9357610e92610d75565b5b6000610ea185828601610e31565b9250506020610eb285828601610e67565b9150509250929050565b6000610ec782610de8565b9050919050565b610ed781610ebc565b82525050565b6000602082019050610ef26000830184610ece565b92915050565b60038110610f0557600080fd5b50565b600081359050610f1781610ef8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f4257610f41610f1d565b5b8235905067ffffffffffffffff811115610f5f57610f5e610f22565b5b602083019150836001820283011115610f7b57610f7a610f27565b5b9250929050565b60008060008060608587031215610f9c57610f9b610d75565b5b6000610faa87828801610f08565b945050602085013567ffffffffffffffff811115610fcb57610fca610d7a565b5b610fd787828801610f2c565b93509350506040610fea87828801610e67565b91505092959194509250565b6000819050919050565b600061101b61101661101184610de8565b610ff6565b610de8565b9050919050565b600061102d82611000565b9050919050565b600061103f82611022565b9050919050565b61104f81611034565b82525050565b600060208201905061106a6000830184611046565b92915050565b60006020828403121561108657611085610d75565b5b600061109484828501610e31565b91505092915050565b6110a681610e46565b82525050565b60006020820190506110c1600083018461109d565b92915050565b6110d081610ebc565b81146110db57600080fd5b50565b6000813590506110ed816110c7565b92915050565b60006020828403121561110957611108610d75565b5b6000611117848285016110de565b91505092915050565b600080fd5b6000610160828403121561113c5761113b611120565b5b81905092915050565b6000819050919050565b61115881611145565b811461116357600080fd5b50565b6000813590506111758161114f565b92915050565b60008060006060848603121561119457611193610d75565b5b600084013567ffffffffffffffff8111156111b2576111b1610d7a565b5b6111be86828701611125565b93505060206111cf86828701611166565b92505060406111e086828701610e67565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611224578082015181840152602081019050611209565b60008484015250505050565b6000601f19601f8301169050919050565b600061124c826111ea565b61125681856111f5565b9350611266818560208601611206565b61126f81611230565b840191505092915050565b600060408201905081810360008301526112948185611241565b90506112a3602083018461109d565b9392505050565b6112b381610d7f565b82525050565b60006020820190506112ce60008301846112aa565b92915050565b6112dd81610e08565b82525050565b60006040820190506112f860008301856112d4565b611305602083018461109d565b9392505050565b600060208201905061132160008301846112d4565b92915050565b60008151905061133681610e50565b92915050565b60006020828403121561135257611351610d75565b5b600061136084828501611327565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006113d6602683611369565b91506113e18261137a565b604082019050919050565b60006020820190508181036000830152611405816113c9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611442602083611369565b915061144d8261140c565b602082019050919050565b6000602082019050818103600083015261147181611435565b9050919050565b7f53656e646572206e6f7420456e747279506f696e740000000000000000000000600082015250565b60006114ae601583611369565b91506114b982611478565b602082019050919050565b600060208201905081810360008301526114dd816114a1565b9050919050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b600061151a600d83611369565b9150611525826114e4565b602082019050919050565b600060208201905081810360008301526115498161150d565b905091905056fea2646970667358221220dd1bf70bad39f1119425e8e62f5902d0b2eb181aba24abcb4787650daab10ef764736f6c63430008110033";

type TestPaymasterAcceptAllConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPaymasterAcceptAllConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPaymasterAcceptAll__factory extends ContractFactory {
  constructor(...args: TestPaymasterAcceptAllConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestPaymasterAcceptAll> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestPaymasterAcceptAll>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): TestPaymasterAcceptAll {
    return super.attach(address) as TestPaymasterAcceptAll;
  }
  override connect(signer: Signer): TestPaymasterAcceptAll__factory {
    return super.connect(signer) as TestPaymasterAcceptAll__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPaymasterAcceptAllInterface {
    return new utils.Interface(_abi) as TestPaymasterAcceptAllInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPaymasterAcceptAll {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestPaymasterAcceptAll;
  }
}
