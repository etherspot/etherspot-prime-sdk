/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestSignatureAggregator,
  TestSignatureAggregatorInterface,
} from "../../../../src/aa-4337/test/TestSignatureAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "delay",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatedSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "",
        type: "tuple",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a2d806100206000396000f3fe60806040526004361061003f5760003560e01c8063275e2d7914610044578063451711591461008157806364c530cd1461009d578063e3563a4f146100da575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610381565b610103565b6040516100789190610467565b60405180910390f35b61009b60048036038101906100969190610535565b610187565b005b3480156100a957600080fd5b506100c460048036038101906100bf919061059a565b6101f7565b6040516100d19190610467565b60405180910390f35b3480156100e657600080fd5b5061010160048036038101906100fc9190610639565b610210565b005b60606000805b8484905081101561015d57848482818110610127576101266106ba565b5b905060200281019061013991906106ee565b60200135826101489190610750565b91508080610155906107a6565b915050610109565b508060405160200161016f91906107fe565b60405160208183030381529060405291505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b81526004016101c19190610828565b6000604051808303818588803b1580156101da57600080fd5b505af11580156101ee573d6000803e3d6000fd5b50505050505050565b6060604051806020016040528060008152509050919050565b6000805b8585905081101561026e576000868683818110610234576102336106ba565b5b905060200281019061024691906106ee565b60200135905080836102589190610750565b9250508080610266906107a6565b915050610214565b50602083839050146102b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ac906108c6565b60405180910390fd5b600083838101906102c69190610912565b905081811461030a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610301906109d7565b60405180910390fd5b505050505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126103415761034061031c565b5b8235905067ffffffffffffffff81111561035e5761035d610321565b5b60208301915083602082028301111561037a57610379610326565b5b9250929050565b6000806020838503121561039857610397610312565b5b600083013567ffffffffffffffff8111156103b6576103b5610317565b5b6103c28582860161032b565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104085780820151818401526020810190506103ed565b83811115610417576000848401525b50505050565b6000601f19601f8301169050919050565b6000610439826103ce565b61044381856103d9565b93506104538185602086016103ea565b61045c8161041d565b840191505092915050565b60006020820190508181036000830152610481818461042e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104b482610489565b9050919050565b60006104c6826104a9565b9050919050565b6104d6816104bb565b81146104e157600080fd5b50565b6000813590506104f3816104cd565b92915050565b600063ffffffff82169050919050565b610512816104f9565b811461051d57600080fd5b50565b60008135905061052f81610509565b92915050565b6000806040838503121561054c5761054b610312565b5b600061055a858286016104e4565b925050602061056b85828601610520565b9150509250929050565b600080fd5b6000610160828403121561059157610590610575565b5b81905092915050565b6000602082840312156105b0576105af610312565b5b600082013567ffffffffffffffff8111156105ce576105cd610317565b5b6105da8482850161057a565b91505092915050565b60008083601f8401126105f9576105f861031c565b5b8235905067ffffffffffffffff81111561061657610615610321565b5b60208301915083600182028301111561063257610631610326565b5b9250929050565b6000806000806040858703121561065357610652610312565b5b600085013567ffffffffffffffff81111561067157610670610317565b5b61067d8782880161032b565b9450945050602085013567ffffffffffffffff8111156106a05761069f610317565b5b6106ac878288016105e3565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000823560016101600383360303811261070b5761070a6106e9565b5b80830191505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061075b82610717565b915061076683610717565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561079b5761079a610721565b5b828201905092915050565b60006107b182610717565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107e4576107e3610721565b5b600182019050919050565b6107f881610717565b82525050565b600060208201905061081360008301846107ef565b92915050565b610822816104f9565b82525050565b600060208201905061083d6000830184610819565b92915050565b600082825260208201905092915050565b7f546573745369676e617475726556616c696461746f723a20736967206d75737460008201527f2062652075696e74000000000000000000000000000000000000000000000000602082015250565b60006108b0602883610843565b91506108bb82610854565b604082019050919050565b600060208201905081810360008301526108df816108a3565b9050919050565b6108ef81610717565b81146108fa57600080fd5b50565b60008135905061090c816108e6565b92915050565b60006020828403121561092857610927610312565b5b6000610936848285016108fd565b91505092915050565b7f546573745369676e617475726556616c696461746f723a20616767726567617460008201527f6564207369676e6174757265206d69736d6174636820286e6f6e63652073756d60208201527f2900000000000000000000000000000000000000000000000000000000000000604082015250565b60006109c1604183610843565b91506109cc8261093f565b606082019050919050565b600060208201905081810360008301526109f0816109b4565b905091905056fea2646970667358221220ec7de9f4fec667886c78d9527944816e8837cec15685f62f8e5682f70e1aa0af64736f6c634300080c0033";

type TestSignatureAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSignatureAggregator__factory extends ContractFactory {
  constructor(...args: TestSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestSignatureAggregator> {
    return super.deploy(overrides || {}) as Promise<TestSignatureAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestSignatureAggregator {
    return super.attach(address) as TestSignatureAggregator;
  }
  override connect(signer: Signer): TestSignatureAggregator__factory {
    return super.connect(signer) as TestSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSignatureAggregatorInterface {
    return new utils.Interface(_abi) as TestSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestSignatureAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestSignatureAggregator;
  }
}
