/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestSignatureAggregator,
  TestSignatureAggregatorInterface,
} from "../../../../src/aa-4337/test/TestSignatureAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "delay",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatedSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "",
        type: "tuple",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c85806100206000396000f3fe60806040526004361061003f5760003560e01c8063275e2d7914610044578063451711591461008157806364c530cd1461009d578063e3563a4f146100da575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610605565b610103565b60405161007891906106e2565b60405180910390f35b61009b600480360381019061009691906107b0565b610228565b005b3480156100a957600080fd5b506100c460048036038101906100bf9190610815565b6102d4565b6040516100d191906106e2565b60405180910390f35b3480156100e657600080fd5b5061010160048036038101906100fc91906108b4565b610329565b005b606061011967ea87c80dffb6aea960c01b610593565b61012d6779cc957a9e79f7dd60c01b610593565b61014167b3621851c95bd34260c01b610593565b600061015767195ce410afc7726860c01b610593565b61016b67c5f6c0f873579eec60c01b610593565b60005b848490508110156101d65761018d679fd950c3cda4fc2560c01b610593565b8484828181106101a05761019f610935565b5b90506020028101906101b29190610969565b60200135826101c191906109cb565b915080806101ce906109ff565b91505061016e565b506101eb674157068717e038eb60c01b610593565b6101ff67b49552f933cc410d60c01b610593565b806040516020016102109190610a56565b60405160208183030381529060405291505092915050565b61023c6735e29c9a4942c87f60c01b610593565b61025067e0f36aa6147502bd60c01b610593565b61026467df5452928e4b5c4f60c01b610593565b8173ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b815260040161029e9190610a80565b6000604051808303818588803b1580156102b757600080fd5b505af11580156102cb573d6000803e3d6000fd5b50505050505050565b60606102ea676b7e2403b38f4a9060c01b610593565b6102fe67086916ae641d127460c01b610593565b610312675fb799e6af2fe82760c01b610593565b604051806020016040528060008152509050919050565b61033d673a2f1aeb688ca5b660c01b610593565b610350665a898f3b8f5c2c60c01b610593565b61036467e8c80b102b0fc16760c01b610593565b600061037a6744a0dc7c3bb11d4660c01b610593565b61038e67df511c6344ef819960c01b610593565b60005b85859050811015610427576103b0673de8c56c048a3b2a60c01b610593565b6103c467794283bf5b1c128260c01b610593565b60008686838181106103d9576103d8610935565b5b90506020028101906103eb9190610969565b602001359050610405670be56f7648b7911960c01b610593565b808361041191906109cb565b925050808061041f906109ff565b915050610391565b5061043c678f46bafe436f2d4d60c01b610593565b61045067e1486a051de9a24460c01b610593565b61046467ee4dc537fcc993cb60c01b610593565b602083839050146104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a190610b1e565b60405180910390fd5b6104be67a9cbcf265aa6672760c01b610593565b6104d267cb3fa699c5cdadb760c01b610593565b6104e66741cb8946e71253f360c01b610593565b600083838101906104f79190610b6a565b905061050d671213265e4f49709d60c01b610593565b61052167151f07d8a4fbf22660c01b610593565b61053567e1caf2aea976b8c560c01b610593565b818114610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e90610c2f565b60405180910390fd5b61058b67c472524774129b5860c01b610593565b505050505050565b50565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126105c5576105c46105a0565b5b8235905067ffffffffffffffff8111156105e2576105e16105a5565b5b6020830191508360208202830111156105fe576105fd6105aa565b5b9250929050565b6000806020838503121561061c5761061b610596565b5b600083013567ffffffffffffffff81111561063a5761063961059b565b5b610646858286016105af565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561068c578082015181840152602081019050610671565b60008484015250505050565b6000601f19601f8301169050919050565b60006106b482610652565b6106be818561065d565b93506106ce81856020860161066e565b6106d781610698565b840191505092915050565b600060208201905081810360008301526106fc81846106a9565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061072f82610704565b9050919050565b600061074182610724565b9050919050565b61075181610736565b811461075c57600080fd5b50565b60008135905061076e81610748565b92915050565b600063ffffffff82169050919050565b61078d81610774565b811461079857600080fd5b50565b6000813590506107aa81610784565b92915050565b600080604083850312156107c7576107c6610596565b5b60006107d58582860161075f565b92505060206107e68582860161079b565b9150509250929050565b600080fd5b6000610160828403121561080c5761080b6107f0565b5b81905092915050565b60006020828403121561082b5761082a610596565b5b600082013567ffffffffffffffff8111156108495761084861059b565b5b610855848285016107f5565b91505092915050565b60008083601f840112610874576108736105a0565b5b8235905067ffffffffffffffff811115610891576108906105a5565b5b6020830191508360018202830111156108ad576108ac6105aa565b5b9250929050565b600080600080604085870312156108ce576108cd610596565b5b600085013567ffffffffffffffff8111156108ec576108eb61059b565b5b6108f8878288016105af565b9450945050602085013567ffffffffffffffff81111561091b5761091a61059b565b5b6109278782880161085e565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000823560016101600383360303811261098657610985610964565b5b80830191505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d682610992565b91506109e183610992565b92508282019050808211156109f9576109f861099c565b5b92915050565b6000610a0a82610992565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a3c57610a3b61099c565b5b600182019050919050565b610a5081610992565b82525050565b6000602082019050610a6b6000830184610a47565b92915050565b610a7a81610774565b82525050565b6000602082019050610a956000830184610a71565b92915050565b600082825260208201905092915050565b7f546573745369676e617475726556616c696461746f723a20736967206d75737460008201527f2062652075696e74000000000000000000000000000000000000000000000000602082015250565b6000610b08602883610a9b565b9150610b1382610aac565b604082019050919050565b60006020820190508181036000830152610b3781610afb565b9050919050565b610b4781610992565b8114610b5257600080fd5b50565b600081359050610b6481610b3e565b92915050565b600060208284031215610b8057610b7f610596565b5b6000610b8e84828501610b55565b91505092915050565b7f546573745369676e617475726556616c696461746f723a20616767726567617460008201527f6564207369676e6174757265206d69736d6174636820286e6f6e63652073756d60208201527f2900000000000000000000000000000000000000000000000000000000000000604082015250565b6000610c19604183610a9b565b9150610c2482610b97565b606082019050919050565b60006020820190508181036000830152610c4881610c0c565b905091905056fea26469706673582212206eaae1e6e2979d57a765a9f5157cf31e3e66a02d4472b28d1c27b4803a1e655a64736f6c63430008110033";

type TestSignatureAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSignatureAggregator__factory extends ContractFactory {
  constructor(...args: TestSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestSignatureAggregator> {
    return super.deploy(overrides || {}) as Promise<TestSignatureAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestSignatureAggregator {
    return super.attach(address) as TestSignatureAggregator;
  }
  override connect(signer: Signer): TestSignatureAggregator__factory {
    return super.connect(signer) as TestSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSignatureAggregatorInterface {
    return new utils.Interface(_abi) as TestSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestSignatureAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestSignatureAggregator;
  }
}
