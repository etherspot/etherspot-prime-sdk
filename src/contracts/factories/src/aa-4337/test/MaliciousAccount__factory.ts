/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MaliciousAccount,
  MaliciousAccountInterface,
} from "../../../../src/aa-4337/test/MaliciousAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052604051610607380380610607833981810160405281019061002591906100e0565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061010d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009b82610070565b9050919050565b60006100ad82610090565b9050919050565b6100bd816100a2565b81146100c857600080fd5b50565b6000815190506100da816100b4565b92915050565b6000602082840312156100f6576100f561006b565b5b6000610104848285016100cb565b91505092915050565b6104eb8061011c6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633a871cdd14610030575b600080fd5b61004a6004803603810190610045919061022a565b610060565b60405161005791906102a8565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf983306040518363ffffffff1660e01b81526004016100bd9190610304565b6000604051808303818588803b1580156100d657600080fd5b505af11580156100ea573d6000803e3d6000fd5b505050505060008460c001358560a00135866080013561010a919061034e565b610114919061034e565b90506000818461012491906103d3565b90506000866101000135826101399190610404565b905086602001358114610181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017890610495565b60405180910390fd5b600093505050509392505050565b600080fd5b600080fd5b600080fd5b600061016082840312156101b5576101b4610199565b5b81905092915050565b6000819050919050565b6101d1816101be565b81146101dc57600080fd5b50565b6000813590506101ee816101c8565b92915050565b6000819050919050565b610207816101f4565b811461021257600080fd5b50565b600081359050610224816101fe565b92915050565b6000806000606084860312156102435761024261018f565b5b600084013567ffffffffffffffff81111561026157610260610194565b5b61026d8682870161019e565b935050602061027e868287016101df565b925050604061028f86828701610215565b9150509250925092565b6102a2816101f4565b82525050565b60006020820190506102bd6000830184610299565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ee826102c3565b9050919050565b6102fe816102e3565b82525050565b600060208201905061031960008301846102f5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610359826101f4565b9150610364836101f4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103995761039861031f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006103de826101f4565b91506103e9836101f4565b9250826103f9576103f86103a4565b5b828204905092915050565b600061040f826101f4565b915061041a836101f4565b92508282101561042d5761042c61031f565b5b828203905092915050565b600082825260208201905092915050565b7f5265766572742061667465722066697273742076616c69646174696f6e000000600082015250565b600061047f601d83610438565b915061048a82610449565b602082019050919050565b600060208201905081810360008301526104ae81610472565b905091905056fea264697066735822122099332b3f09d8268dca15aa7275cf4e661e4a287298292021e73dc2765563482264736f6c634300080c0033";

type MaliciousAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MaliciousAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MaliciousAccount__factory extends ContractFactory {
  constructor(...args: MaliciousAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<MaliciousAccount> {
    return super.deploy(_ep, overrides || {}) as Promise<MaliciousAccount>;
  }
  override getDeployTransaction(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override attach(address: string): MaliciousAccount {
    return super.attach(address) as MaliciousAccount;
  }
  override connect(signer: Signer): MaliciousAccount__factory {
    return super.connect(signer) as MaliciousAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MaliciousAccountInterface {
    return new utils.Interface(_abi) as MaliciousAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MaliciousAccount {
    return new Contract(address, _abi, signerOrProvider) as MaliciousAccount;
  }
}
