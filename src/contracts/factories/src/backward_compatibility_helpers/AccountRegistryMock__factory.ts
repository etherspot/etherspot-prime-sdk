/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AccountRegistryMock,
  AccountRegistryMockInterface,
} from "../../../src/backward_compatibility_helpers/AccountRegistryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidAccountSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidAccountSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
    ],
    name: "mockAccountOwners",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e75806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063124e9eb314610046578063cbc438bf14610076578063e1e382ce14610092575b600080fd5b610060600480360381019061005b919061072f565b6100c2565b60405161006d91906107df565b60405180910390f35b610090600480360381019061008b9190610949565b6101ff565b005b6100ac60048036038101906100a791906109db565b6102d7565b6040516100b991906107df565b60405180910390f35b60008061016884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061015a88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103c7565b61042190919063ffffffff16565b90506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505095945050505050565b60008151905060005b818110156102d15760016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085848151811061026557610264610a4f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806102c990610ab7565b915050610208565b50505050565b60008061033184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508661042190919063ffffffff16565b90506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915050949350505050565b60006103d382516104e5565b826040516020016103e49190610b7a565b604051602081830303815290604052604051602001610404929190610c24565b604051602081830303815290604052805190602001209050919050565b600080600090506041835114156104db5760008060006020860151925060408601519150606086015160001a9050601b8160ff16101561046b57601b816104689190610c60565b90505b601b8160ff1614806104805750601c8160ff16145b156104d757600187828585604051600081526020016040526040516104a89493929190610cb5565b6020604051602081039080840390855afa1580156104ca573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b6060600082141561052d576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610653565b600082905060005b6000821461055f57808061054890610ab7565b915050600a826105589190610d29565b9150610535565b60008167ffffffffffffffff81111561057b5761057a61080b565b5b6040519080825280601f01601f1916602001820160405280156105ad5781602001600182028036833780820191505090505b50905060006001836105bf9190610d5a565b90508593505b6000841461064b57600a846105da9190610d8e565b60306105e69190610dbf565b60f81b8282806105f590610e15565b93508151811061060857610607610a4f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a846106449190610d29565b93506105c5565b819450505050505b919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106978261066c565b9050919050565b6106a78161068c565b81146106b257600080fd5b50565b6000813590506106c48161069e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126106ef576106ee6106ca565b5b8235905067ffffffffffffffff81111561070c5761070b6106cf565b5b602083019150836001820283011115610728576107276106d4565b5b9250929050565b60008060008060006060868803121561074b5761074a610662565b5b6000610759888289016106b5565b955050602086013567ffffffffffffffff81111561077a57610779610667565b5b610786888289016106d9565b9450945050604086013567ffffffffffffffff8111156107a9576107a8610667565b5b6107b5888289016106d9565b92509250509295509295909350565b60008115159050919050565b6107d9816107c4565b82525050565b60006020820190506107f460008301846107d0565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610843826107fa565b810181811067ffffffffffffffff821117156108625761086161080b565b5b80604052505050565b6000610875610658565b9050610881828261083a565b919050565b600067ffffffffffffffff8211156108a1576108a061080b565b5b602082029050602081019050919050565b60006108c56108c084610886565b61086b565b905080838252602082019050602084028301858111156108e8576108e76106d4565b5b835b8181101561091157806108fd88826106b5565b8452602084019350506020810190506108ea565b5050509392505050565b600082601f8301126109305761092f6106ca565b5b81356109408482602086016108b2565b91505092915050565b600080604083850312156109605761095f610662565b5b600061096e858286016106b5565b925050602083013567ffffffffffffffff81111561098f5761098e610667565b5b61099b8582860161091b565b9150509250929050565b6000819050919050565b6109b8816109a5565b81146109c357600080fd5b50565b6000813590506109d5816109af565b92915050565b600080600080606085870312156109f5576109f4610662565b5b6000610a03878288016106b5565b9450506020610a14878288016109c6565b935050604085013567ffffffffffffffff811115610a3557610a34610667565b5b610a41878288016106d9565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610ac282610aad565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610af557610af4610a7e565b5b600182019050919050565b600081519050919050565b600081905092915050565b60005b83811015610b34578082015181840152602081019050610b19565b83811115610b43576000848401525b50505050565b6000610b5482610b00565b610b5e8185610b0b565b9350610b6e818560208601610b16565b80840191505092915050565b6000610b868284610b49565b915081905092915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b6000610bd2601a83610b91565b9150610bdd82610b9c565b601a82019050919050565b600081519050919050565b6000610bfe82610be8565b610c088185610b91565b9350610c18818560208601610b16565b80840191505092915050565b6000610c2f82610bc5565b9150610c3b8285610bf3565b9150610c478284610b49565b91508190509392505050565b600060ff82169050919050565b6000610c6b82610c53565b9150610c7683610c53565b92508260ff03821115610c8c57610c8b610a7e565b5b828201905092915050565b610ca0816109a5565b82525050565b610caf81610c53565b82525050565b6000608082019050610cca6000830187610c97565b610cd76020830186610ca6565b610ce46040830185610c97565b610cf16060830184610c97565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d3482610aad565b9150610d3f83610aad565b925082610d4f57610d4e610cfa565b5b828204905092915050565b6000610d6582610aad565b9150610d7083610aad565b925082821015610d8357610d82610a7e565b5b828203905092915050565b6000610d9982610aad565b9150610da483610aad565b925082610db457610db3610cfa565b5b828206905092915050565b6000610dca82610aad565b9150610dd583610aad565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0a57610e09610a7e565b5b828201905092915050565b6000610e2082610aad565b91506000821415610e3457610e33610a7e565b5b60018203905091905056fea26469706673582212203ec6753d97a3dd90bd2080c115a00df338c8e229c6bb8064afd2b949333f2d3f64736f6c634300080c0033";

type AccountRegistryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountRegistryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountRegistryMock__factory extends ContractFactory {
  constructor(...args: AccountRegistryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AccountRegistryMock> {
    return super.deploy(overrides || {}) as Promise<AccountRegistryMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AccountRegistryMock {
    return super.attach(address) as AccountRegistryMock;
  }
  override connect(signer: Signer): AccountRegistryMock__factory {
    return super.connect(signer) as AccountRegistryMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountRegistryMockInterface {
    return new utils.Interface(_abi) as AccountRegistryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountRegistryMock {
    return new Contract(address, _abi, signerOrProvider) as AccountRegistryMock;
  }
}
